<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>Geoff Wagner &#8211; A DevOps Blog</title>
	<atom:link href="https://www.valewood.org/author/gwagner/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.valewood.org/</link>
	<description>Occasionally a developer makes an Ops!</description>
	<lastBuildDate>Tue, 06 Dec 2022 18:16:09 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>

<image>
	<url>https://www.valewood.org/wp-content/uploads/2022/08/A-DevOoops-1-e1660773390219.png</url>
	<title>Geoff Wagner &#8211; A DevOps Blog</title>
	<link>https://www.valewood.org/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What is a Common Misconception about Agile and DevOps?</title>
		<link>https://www.valewood.org/devops-and-agile-misconceptions/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Tue, 06 Dec 2022 14:20:33 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[agile]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[opinion]]></category>
		<category><![CDATA[sdlc]]></category>
		<guid isPermaLink="false">/?p=1966</guid>

					<description><![CDATA[In this blog, we discuss DevOps and Agile at great length. DevOps is a methodology for technology delivery while Agile is a methodology for project management. The two pair together quite well to increase the flow of value to the&#8230;]]></description>
										<content:encoded><![CDATA[
<p>In this blog, we discuss <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> and Agile at great length.  DevOps is a methodology for technology delivery while Agile is a methodology for project management.  The two pair together quite well to increase the <a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-flow/" data-internallinksmanager029f6b8e52c="28" title="Understanding the DevOps Process Flow in 2022" target="_blank" rel="noopener">flow of value</a> to the market.</p>



<p>They can also be intertwined and confusing leading to misconceptions if one isn&#8217;t careful in their adoption journey.  Let&#8217;s dive in and discuss the most common misconception about DevOps and Agile!</p>



<h2>What is the most Common Misconception about Agile and DevOps?</h2>



<p>There are several misconceptions that surface quickly when businesses are evaluating DevOps and Agile either independently or together.  Below are a few of those misconceptions.</p>



<h3>Common Misconception #1</h3>



<p>DevOps and Agile are commonly viewed as a tool to fill a gap in delivery. If delivery cycles are variable in length, inconsistent, and filled with twists and turns; companies will look for some quick outs to patch up their delivery to ship something. The problem with this approach is generally <a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-culture-of-quality/">quality</a>.</p>



<p>While borrowing from DevOps and Agile might work in the short term, it does not work over the long term. Companies or projects that are looking to step up their delivery processes really need to look at things holistically and make some choices about how they want to engage in the market with their customers.</p>



<h3>Common Misconception #2</h3>



<p>A common misconception is that DevOps and/or Agile can be purchased off the shelf and implemented.</p>



<p>DevOps and/or Agile cannot be purchased.  There is no singular toolset, workbook, or process that can be purchased and put in place to shortcut the adoption of these methodologies.  Both of these methodologies are a fundamental transformation of delivery and need to be adopted fully in order to be effective.</p>



<p>This transformation is also cross-cutting throughout all technical and non-technical roles.  A sales team cannot assume that groups delivering technology are delivering in a different way than they are selling.  Account management cannot build plans with customers on their future technology state and expect that planning to look different than the overall delivery workflows.  Technology groups cannot adopt a different way of delivering if it is at odds with business expectations.</p>



<h3>Common Misconception #3</h3>



<p>A common misconception is that DevOps can be implemented without Agile</p>



<p>Now, that statement is a little clickbaity.  You can indeed implement DevOps inside of other project management frameworks.  I would make the argument that you cannot fully realize the benefits of delivery transformation unless you adopt both DevOps and Agile.  DevOps practices do not lend themselves well to Waterfall, but it can be done.  You really lose out on all of the continuous improvement facets of DevOps which really means you are adopting some automation and calling it &#8220;DevOps&#8221;.</p>



<h2>How Should I view DevOps and Agile?</h2>



<p>By fully adopting Agile and DevOps, a lot of doors are opened up for delivery.</p>



<ul>
<li><strong><a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-flow/" target="_blank" rel="noreferrer noopener">Flow</a>:</strong> Instead of moving from task to task, or project to project, work can be put onto a conveyor belt of delivery. Agile and DevOps offer more of an assembly line-type flow to technology delivery.</li>



<li><strong><a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-culture-of-quality/" target="_blank" rel="noreferrer noopener">Quality</a>:</strong> Context switching impacts quality. By offering more stability in work coming down the pipeline, engineers in various disciplines can focus on quality first.</li>



<li><strong><a href="https://www.valewood.org/topics/devops/benefits-of-devops/flexibility/" target="_blank" rel="noreferrer noopener">Flexibility</a>:</strong> Companies need to meet the market where it is at. Sometimes this means quickly pivoting from products that are not working to products that do well in the market.</li>



<li><a href="https://www.valewood.org/devops-cycle-time/"><strong>Release faster and work smarter</strong>:</a> By reducing the size and scope of deliverables, the team can focus on shipping more often.</li>



<li><strong><a href="https://www.valewood.org/why-are-ci-cd-pipelines-part-of-devops/">Simplifies Software Development and Operations Focus</a></strong>: Day-to-day operations can seem like a burden that interrupts delivery frequently. By adopting DevOps, operations are a normal part of everyday life.</li>



<li><strong><a href="https://www.valewood.org/devops-trust/">Responsibility</a>:</strong> Agile helps individual contributors feel like they are part of something bigger by influencing the overall planning and delivery processes. They are not just taking orders from the tower, they are actively delivering value against their vision of great outcomes.</li>



<li><strong><a href="https://www.valewood.org/topics/devops/benefits-of-devops/consistency/" target="_blank" rel="noreferrer noopener">Consistency</a>:</strong> Consistency brings predictability and reliability to products and planning</li>



<li><strong>Measurement:</strong> Promote data-driven decision-making into your day-to-day workflows through predictability and consistency in the flow of work.</li>



<li><strong>Security:</strong> Security is no longer a secondary burdensome process that detracts from delivering work to the market. Security is built right into DevOps through automated delivery pipelines.</li>
</ul>



<p>Any of these benefits could be achieved on their own in their own ways. By fully embracing Agile and DevOps, each of these ideals comes with the methodology. There is no need to solve an already-solved problem.</p>



<h2>Conclusion</h2>



<p>When first hearing about DevOps and Agile, it is easy to build some initial blinders and misconceptions about what they really mean when utilized as a symbiotic relationship.  It takes a mindset change, and a full perspective shift to realize the benefits of DevOps and Agile together.  </p>



<p>I would encourage anyone out there to go get some training, watch some YouTube videos, and read as much as you can about the methodologies and what they have to offer.  DevOps and Agile together can really open up a lot of new benefits for your business and your customers.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Helm: Kubernetes Cluster Unreachable </title>
		<link>https://www.valewood.org/helm-kubernetes-cluster-unreachable/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 03 Dec 2022 02:51:59 +0000</pubDate>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[kubernetes]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=1924</guid>

					<description><![CDATA[Kubernetes, while fairly mature as a platform, is still considered an emerging technology in the business space. Due to this, lots of engineers are spending their free time trying to learn about Helm which can lead to some pretty frustrating&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a>, while fairly mature as a platform, is still considered an emerging technology in the business space.  Due to this, lots of engineers are spending their free time trying to learn about Helm which can lead to some pretty frustrating errors.  </p>



<p>Let&#8217;s discuss why you might be receiving <code>Error: Kubernetes cluster unreachable</code> when trying to connect to your cluster for the first time.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Kubernetes Install</h2>



<p>There are a lot of different mechanisms on the market today to get Kubernetes up and running depending on your environment.  How you installed Kubernetes is important for troubleshooting later.  Review the install methods and make sure you align underneath one of them in some fashion.</p>



<h3>Local Environment</h3>



<p>Local Kubernetes is going to use <a href="https://k3s.io/" target="_blank" rel="noopener">k3s</a> or <a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener">minikube</a> to run and install a local version on a standard workstation.  This is a great way to get familiar with Kubernetes because these products will download and install all the requisite dependencies to bootstrap anyone regardless of their skill level.</p>



<h3>On-Prem Environment</h3>



<p>I am differentiating local and on-prem simply from the viewpoint of servers vs desktops.  In a more server-focused environment, many people will use <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> or <a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">kops</a> to deploy their Kubernetes clusters.  Kubespray will ensure that servers are properly configured through IaC while downloading and installing baseline Kubernetes.  By the time you are done, a fully functional cluster should be available.</p>



<p>Kubespray does come with a lot more knobs and dials since it makes fewer opinionated decisions about what your cluster setup should look like.  In a local environment, ingress is going to be handled in a very specific way.  In an on-prem environment, you may have network appliances that want to handle ingress in a very specific way.  Kubespray should be able to get most of your configurations taken care of for your special circumstances.</p>



<h3>Cloud Environment</h3>



<p>Cloud environments can be configured the same way on-prem environments are through kubespray and kops.  Cloud-based VM instances would be spun up on management networks and tools would be run against them to achieve a functioning cluster.</p>



<p>Most cloud providers will have their own managed Kubernetes to be used as well.  Those are probably a much safer way to get started when just starting to dabble in the Kubernetes space.  </p>



<ul>
<li><a href="https://aws.amazon.com/eks/" target="_blank" rel="noopener">Amazon EKS</a></li>



<li><a href="https://azure.microsoft.com/en-us/products/kubernetes-service/" target="_blank" rel="noopener">Azure AKS</a></li>



<li><a href="https://www.digitalocean.com/products/kubernetes" target="_blank" rel="noopener">DigitalOcean</a></li>



<li><a href="https://www.vultr.com/kubernetes/" target="_blank" rel="noopener">Vultr</a></li>
</ul>



<p>These solutions generally are only a few clicks away from a full-stack deployment.  Once you get a bit more comfortable, it would be a good idea to toss out your test cluster and start to move into Terraform, CloudFormation, or <a href="https://azure.microsoft.com/en-us/get-started/azure-portal" data-internallinksmanager029f6b8e52c="20" title="Azure" rel="nofollow noopener" target="_blank">Azure</a> Resource Manager automation to ensure your clusters are codified for future upgrades.</p>



<h2>Error: Kubernetes cluster unreachable</h2>



<p>There are going to be a few troubleshooting steps you should take to diagnose this issue.  Each of them is going to be a little bit different depending on your deployment setup.</p>



<h3>Check Your Kubeconfig</h3>



<p>The first thing to check is your <code>$HOME/.kube/config</code> file.  This file contains all of the relevant information for connecting to your Kubernetes cluster.  It is also very important you keep this file safe and secret since it holds credentials for that connection as well.</p>



<h4>My Kubeconfig is Missing!</h4>



<p>If your kubeconfig file is missing, review your Kubernetes installation instructions for anything specific about copying a kubeconfig to the proper folder on your local machine.  The instructions may also walk you through how to create one.  Helm will not work without this file being created and in the proper location.</p>



<h4>My Kubeconfig Exists!</h4>



<p>If you open that file to read it, you will find that it is YAML formatted with connection parameters in it.  These parameters should include some certificate information, which are credentials and cluster identification verification, and a hostname for the cluster management API address.</p>



<p>If you have kubectl installed on the same machine as your kubeconfig, a simple test would be to run <code>kubectl get nodes</code> to see if you get a list of servers back from the kubernetes API.  If you get an error, then either you do not have the right level of access, or your kubeconfig is not properly configured.  See above <strong>&#8220;My Kubeconfig is Missing&#8221;</strong>.</p>



<p>If this works as intended, and you see a list of servers the next step is to ensure that your kubeconfig is on the same computer that you would like to run helm from.  If you are running helm from a local workstation, make sure you have a proper kubeconfig on that workstation.  If you are running helm from a different server, ensure a kubeconfig is provided for that server.  Make sure to re-test.</p>



<h4>Check Networking</h4>



<p>Helm communicates with the Kubernetes API over port 6443.  Using NMap to check ports, ensure that the machine you are intending to run helm from has clear line of sight communication with the Kubernetes cluster over port 6443.  This can be achieved on Linux via this command: nmap –p 6443 {{cluster address/master hostname}}.  You can find the cluster address/master hostname inside of a validated kubeconfig.</p>



<p>If you are using Windows and looking for an example of how to do port scans, I would suggest switching to Linux or Mac.</p>



<p>If ports show closed or filtered, network communication will not be established with the cluster and Helm will not be able to run configurations.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Additional Resources</h2>



<p>The steps outlined above should get you pointed in the right direction when you receive Helm errors when trying to contact your cluster for the first time.</p>



<p>If you did not find the answers you needed via this article, I have added a few additional resources below that may be able to help get you sorted out.  If you have additional information to share on this topic, please <a href="https://www.valewood.org/contact/" data-type="page" data-id="984">contact me</a> and I will update this post to reflect any changes.</p>



<ul>
<li><a href="https://github.com/k3s-io/k3s/issues/1126" target="_blank" rel="noopener">GitHub</a></li>



<li><a href="https://stackoverflow.com/questions/63066604/error-kubernetes-cluster-unreachable-get-http-localhost8080-versiontimeou" target="_blank" rel="noopener">StackOverflow</a></li>



<li><a href="https://pet2cattle.com/2022/07/install-helm-k3s" data-type="URL" data-id="https://pet2cattle.com/2022/07/install-helm-k3s" target="_blank" rel="noopener">Pet2Cattle</a></li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>DevOps Roll-up: November 2022</title>
		<link>https://www.valewood.org/devops-roll-up-novembers-2022/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Wed, 30 Nov 2022 22:08:32 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[roll-up]]></category>
		<guid isPermaLink="false">/?p=1909</guid>

					<description><![CDATA[Below is a list of DevOps articles/sites that I discovered over the past month and found interesting. Linux Troubleshooting This is an interesting tool that people can use to test out their Linux troubleshooting skills in a capture-the-flag-style event. Here&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Below is a list of <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> articles/sites that I discovered over the past month and found interesting.</p>



<h2>Linux Troubleshooting</h2>



<p>This is an interesting tool that people can use to test out their Linux troubleshooting skills in a capture-the-flag-style event.</p>



<p>Here is what the developer has to say about their SadServers:</p>



<blockquote class="wp-block-quote">
<p>There is a collection of scenarios, a description of what&#8217;s wrong, and a test to check if the issue has been solved. Servers are spun up on the spot, users get an &#8220;SSH&#8221; shell via a browser window to an ephemeral server (destroyed after the allotted time for solving the challenge) and then they can try and solve the problem.</p>
</blockquote>



<p>Check it out with the link below if you are looking to up your server administration game!</p>



<p><a href="https://github.com/fduran/sadservers" target="_blank" rel="noopener">https://github.com/fduran/sadservers</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p></p>



<h2>DevOps and Software Engineering Job Board</h2>



<p>This is a job board that is centralizing DevOps and Software Engineering jobs on a single board.  I am a big fan of boards like this because they are more targeted and promote more realistic expectations for jobs you might be looking for.</p>



<p><a href="https://software-engineer-jobs.com/" target="_blank" rel="noopener">https://software-engineer-jobs.com/</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p></p>



<h2>Golang Network Bus</h2>



<p>An event bus is a core component in a microservices-based architecture.  Application A (in control of Domain A) will register an event on the event bus every time a data change needs to be synchronized by downstream systems.  Application B (which needs to reference data from Domain A) will then be able to store its own local copy of Domain A&#8217;s data to reduce dependencies on an external system.</p>



<p>I love seeing projects like this get introduced into the ecosystem.  Many times, we are relying on highly scaleable systems with a massive amount of configurable knobs and dials to achieve relatively simple tasks.  Tools like this are a great way to get your feet wet and dive into a new architecture without all of the extensive overhead of enterprise tools.</p>



<p><a href="https://github.com/kamalshkeir/kbus" target="_blank" rel="noopener">https://github.com/kamalshkeir/kbus</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p></p>



<h2>Searchable Asset Directory</h2>



<p>Resmo bills itself as:</p>



<blockquote class="wp-block-quote">
<p>Complete visibility and security for modern teams</p>
</blockquote>



<p>Centralized asset inventory management is a huge deal in DevOps.  By scanning your assets, you can understand what is out of compliance and subsequently investigate where errors may be happening in automation to allow for that noncompliance.  Without this kind of visibility, changes will go unchecked which makes quality suffer.</p>



<p>Another nice feature of a CAIM product like this is; they are a great Single Point of Truth system.  I have utilized these in the past as an API-driven data repository to feed other downstream automation systems with data they need to accomplish their tasks.</p>



<p>Check them out below!</p>



<p><a href="https://www.resmo.com/" target="_blank" rel="noopener">https://www.resmo.com/</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p></p>



<h2>Kustomize</h2>



<p>Kustomize is a great way to keep your configuration files declarative and free of messy variables and if statements.  Configure your application how you would like and then provide specific override files for different environments.  The video below will teach you how to make production ready <a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a> manifests.</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe title="Kustomize: The Best Way to Manage Your Kubernetes Configs" width="1170" height="658" src="https://www.youtube.com/embed/spCdNeNCuFU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div></figure>



<p></p>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p></p>



<h2>Steampunk Spotter</h2>



<p>Steampunk Spotter is an <a href="https://www.ansible.com/" data-internallinksmanager029f6b8e52c="7" title="Ansible">Ansible</a> tool for Development, Quality Assurance, and Operations teams purpose-built to cut down on the management burden of keeping playbooks current.  With built-in upgrade assistance, syntax checking, module assistance, vulnerability identification, and much more!  </p>



<p>If you are interested in super charging your Ansible automation, check them out below!</p>



<p><a href="https://steampunk.si/spotter/" target="_blank" rel="noopener">https://steampunk.si/spotter/</a></p>
]]></content:encoded>
					
		
		
		<media:content url="https://www.youtube.com/embed/spCdNeNCuFU" medium="video" width="1280" height="720">
			<media:player url="https://www.youtube.com/embed/spCdNeNCuFU" />
			<media:title type="plain">Kustomize: The Best Way to Manage Your Kubernetes Configs</media:title>
			<media:description type="html"><![CDATA[Kustomize is a way to customize your Kubernetes manifests files.  In this video I go over everything you you need to know about the theory of Kustomize as we...]]></media:description>
			<media:thumbnail url="/wp-content/uploads/2022/12/devops-rollup-november.jpg" />
			<media:rating scheme="urn:simple">nonadult</media:rating>
		</media:content>
	</item>
		<item>
		<title>Which Term Accurately Describes Agile and DevOps?</title>
		<link>https://www.valewood.org/which-term-describes-devops-and-agile/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 26 Nov 2022 22:20:38 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[devops consistency]]></category>
		<category><![CDATA[opinion]]></category>
		<guid isPermaLink="false">/?p=1796</guid>

					<description><![CDATA[DevOps is a culture and methodology that an organization can prescribe to aid in velocity, consistency, stability, and flow of value to the market. Often confused with &#8220;automation&#8221; being the only benefit of DevOps, the core principles behind DevOps offer&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> is a culture and methodology that an organization can prescribe to aid in velocity, consistency, stability, and <a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-flow/" data-internallinksmanager029f6b8e52c="28" title="Understanding the DevOps Process Flow in 2022" target="_blank" rel="noopener">flow of value</a> to the market.  Often confused with &#8220;automation&#8221; being the only benefit of DevOps, the core principles behind DevOps offer a common set of ideals that a team can align under and strive to achieve.</p>



<p>Big A Agile is a project management methodology that pairs well with DevOps to aid in rationalizing work delivery against a set of guardrails.  Agile also provides prescriptive visibility to work being performed ensuring engineers are not being overloaded by overwhelming business priorities.</p>



<p>With those descriptions out of the way, what term best describes both Agile and DevOps?</p>



<h2>Consistency</h2>



<p>The goal of any organization going through change is to drive consistency in delivery.  Without consistency, a technology group cannot adapt to change and a business cannot meet the market where it is at.  </p>



<p>By driving consistency, a business gets predictability which is powerful when scoping and planning new work.  By understanding real velocity, not aspirational velocity, a business can invest in its people and products to grow at a more sustainable rate.</p>



<p>By driving consistency, technologists get the predictability that they need to make sound and rational decisions about how to approach work.  When working against an unpredictable cycle, technology groups will quickly get overwhelmed by the rate of change and produce solutions that do not meet the demands of the market.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Why Consistency Matters and How it Influences Velocity</h2>



<p>Consistency is important for a couple of factors.  First, individual contributors like their jobs and are not really interested in consistent interruptions or unplanned requests.  While some people may look at those facets as an everyday part of doing business, they can be avoided if mitigation steps are put in place.</p>



<p>When people are constantly interrupted quality suffers.  There is no way around that.  Technology is complex and people need time to focus and go through their problem-solving routines.</p>



<p>Second, inconsistency in delivery has impacts on customers and their delivery.  In technology, you are generally not just working on your system.  There are consumers of your systems who have expectations of either utilization or integration.  By being inconsistent in delivery, you cannot manage the expectations of your consumers.</p>



<p>Lastly, a lack of consistency means that you will never really understand your velocity.  Velocity is important because it tells you how much of X you can get by spending Y.  Think about it like auto manufacturing, they could turn the manufacturing dials up to 11 in their facilities but then you will end up with cars with 3 wheels or loose nuts and bolts.</p>



<p>A trap that we fall into frequently is confusing aspirational velocity with real velocity.  Aspirational velocity is the speed that someone thinks something should get delivered.  Real velocity is a measurement of what can be delivered at a given speed.</p>



<h3>Real Velocity vs Aspirational Velocity</h3>



<p>Aspirational velocity is when a leader says &#8220;We need this product to launch by X date!&#8221;.  We have either all been in that position or will be in that position sometime in our careers.</p>



<p>Without proper support, investment, and foresight in planning; aspirational velocity will almost always end with sub-standard products that greatly increase the future cost to the business.  Leaning harder on anyone in the delivery space always leads to decisions that are short-sighted toward a narrow goal.</p>



<p>I believe aspirational velocity is firmly rooted in the idea of needing to &#8220;take a shot&#8221;.  Checks are constantly being written that others are expected to cash.  Sometimes this works out and I would say can be necessary for a startup or green field project.  Any organization looking to grow over time should be looking for its tipping point when aspirational velocity needs to transition into real velocity to offer a more reliable work environment for their employees.</p>



<p>Real velocity is based on the idea that you are going to make hard choices about which work is important to feed into a model where delivery is consistent.  When more work needs to be done than can be achieved by the current velocity, hard choices will be made to cut work, increase staff, defer work, or invest in current technology to increase velocity.  </p>



<p>Any business should have a firm goal of understanding its real velocity and do everything in its power to tamp down or extinguish aspirational velocity.</p>



<h2>DevOps and Agile are Closely Related</h2>



<p>I have another article that describes how DevOps and Agile are related to each other.  Primarily, Agile is about lean work being performed against targets and goals with frequent demos of the work being completed to influence pivots.  Agile was in need of a technology delivery methodology that could help realize the fundamental mission of Agile. </p>



<p>You can read more about how <a href="https://www.valewood.org/devops-and-agile/" data-type="post" data-id="1264">DevOps and Agile are related here!</a></p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Runners Up</h2>



<p>This question is also asked on a few official exams.  I want to make sure that my perspective on DevOps does not overshadow exams that do not have as much wiggle room in their answers.</p>



<h3>Brainly.in</h3>



<p><a href="https://brainly.in/" data-type="URL" data-id="https://brainly.in/question/36271184" target="_blank" rel="noopener">Brainly</a> answers the question like this:</p>



<blockquote class="wp-block-quote">
<p>Agile is refers to an interative approuch which focuses on collaboration, costumer feedback,and small rapid releases,DevOps is considered a practice bringing development and operations teams together.</p>
<cite>https://brainly.in/question/36271184</cite></blockquote>



<p>The problem is, I don&#8217;t think this answer refers to a specific term.  We can look at this and assume that they are looking at Agile and DevOps as two holistically different approaches which are getting merged together instead of looking for commonality between the project management methodology and the technology delivery methodology.</p>



<p>While this may sound really good on a test, there are real business influences that come from each of the facets that they list in their answer.</p>



<ul>
<li><strong>Collaboration</strong>: Greater collaboration brings more of a hive-mind approach to problem-solving.  Too much collaboration on very large problems can bring analysis paralysis.  By breaking problems down into tiny and lean releases, everyone can stay more focused on achieving goals instead of trying to eat an entire elephant all at once.</li>



<li><strong>Customer Feedback</strong>: Agile focused on getting valuable work products out to the market quickly to reduce investment risk.  Getting feedback from customers is a great way to manage risk and pivot quickly if needed. </li>



<li><strong>Small Rapid Releases</strong>: To further the idea of managing risk, lessening the size of your releases helps you containerize risk into much smaller units.  If something isn&#8217;t working as expected, or the market shifts drastically, it is far less painful to throw that work out and pivot to something more palatable.  Additionally, the risk is lowered on incremental improvements to new features for existing functionality since the introduced change should not pose as great of an impact on an already healthy ecosystem.  This is something <a href="https://blog.cloudflare.com/october-2021-facebook-outage/" target="_blank" rel="noopener">Facebook</a> could learn a thing or two about.</li>



<li><strong>Bringing DevOps and Operations Teams Together</strong>: This is the typical textbook definition of DevOps.  The reality is, DevOps and Agile are about breaking down silos and creating fully cross-functional teams who are able to fully deliver work in a highly efficient and lean way.  DevOps and Agile help drive decision-making down as close to the work being performed as possible while offering up a management framework to transparently keep other interested parties informed while work is being completed and shipped.</li>
</ul>



<p>As you can see, there are a lot of nuances packed into each one of those bullet points.</p>



<h3>Intellipaat.com </h3>



<p><a href="https://intellipaat.com/" data-type="URL" data-id="https://intellipaat.com/" target="_blank" rel="noopener">Intellipatt</a> answers the question like this</p>



<blockquote class="wp-block-quote">
<p>A set of values and principles. Because both follow a set of principles and offer the value that is similar.</p>
<cite>https://intellipaat.com/community/74027/which-term-accurately-describes-agile-and-devops</cite></blockquote>



<p>I believe that this answer is a primarily business-focused answer looking to understand the idea of value in the market.  While it is not an incorrect way to look at things, I do not believe it is the most important way to look at DevOps and Agile.  </p>



<p>Value is a byproduct of DevOps and Agile.  The real benefit to DevOps and Agile is the consistent way that said value gets delivered to the market.  This means that you can calculate and quantify value through data-driven decision-making.  You are also able to manage market expectations and take potentially larger leaps to satisfy your customers.</p>



<h2>Conclusion</h2>



<p>The key to any technology product&#8217;s success is consistency.  DevOps and Agile offer consistency while remaining flexible and focused on common non-functional requirements like reliability and stability.  Other facets of Agile and DevOps like value are byproducts of a team or teams of teams who fully embrace the complementary delivery methodologies.</p>



<p>How would you boil DevOps and Agile down to a single term?  <a href="https://www.valewood.org/contact/" data-type="page" data-id="984">Contact me</a> and let me know!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Why DevOps is Boring in 2022?</title>
		<link>https://www.valewood.org/more-like-boringops/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 26 Nov 2022 18:04:10 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[coding]]></category>
		<category><![CDATA[delivery]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=1786</guid>

					<description><![CDATA[DevOps is a hot topic in the technology world. It&#8217;s no longer just an isolated set of tools and processes which promise an automated future, it’s an entire culture that’s infiltrating every facet of software development. This post will try&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> is a hot topic in the technology world. It&#8217;s no longer just an isolated set of tools and processes which promise an automated future, it’s an entire culture that’s infiltrating every facet of software development.</p>



<p>This post will try to explain why the DevOps methodology itself is not boring.  We will also try to explain why a feeling of boredom stems from properly implemented tools and processes. We also dive into how you can make DevOps more exciting while keeping your sanity intact.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What Does DevOps Mean?</h2>



<p>The term DevOps, or “development operations,” first appeared in the tech world in the early 2000s. It was a term used to describe a certain type of organization that was responsible for the entire application and software development lifecycle, from ideation to production.</p>



<p>Teams would be responsible for both the development and operations workflows, providing a more efficient way of working. As DevOps has grown in popularity, it has expanded beyond just operations teams.</p>



<p>Now, people are interested in speeding up their software development process using the term DevOps to describe the combined usage of infrastructure automation tools and best practices for team collaboration and communication.</p>



<p>There are two main components within DevOps that drive the culture. They are infrastructure as code and automated delivery. IaC is really just a way of organizing your code and infrastructure so that it is easily reproducible and shareable. Automated delivery is a method for automatically deploying applications and configurations without human intervention.</p>



<p>With the increase in automation, engineers may find themselves wondering when the next exciting change event may present itself. They may also wonder if they are automating themselves out of a job.</p>



<p>As a basis for understanding DevOps, you must understand that this practice exists to remove the excitement of a chaotic technology delivery process. DevOps is meant to be boring by nature.</p>



<p>As a side effect of DevOps being stable and consistent, organizations must look for other ways to keep their software engineers and DevOps engineers engaged through other means of excitement.</p>



<h2>Why is DevOps Boring?</h2>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe title="Why DevOps is Boring in 2022" width="1170" height="658" src="https://www.youtube.com/embed/bP5nWWFV2gg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div></figure>



<p>As companies begin implementing modern DevOps practices, some people may notice a lull in excitement. The tools, processes, and overall culture of DevOps may feel exciting at first but quickly turn into monotony. Why?</p>



<p>DevOps becomes boring because people approach it as a checklist. They focus on the tools and processes and completely ignore the culture and mindset that lies behind the methodology.</p>



<p>These people don’t understand why they are implementing certain tools or why they are following specific processes. They are just doing it because they read an article that said their company should be adopting DevOps, or they read a book that talked about the “predictable <a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-flow/" data-internallinksmanager029f6b8e52c="28" title="Understanding the DevOps Process Flow in 2022" target="_blank" rel="noopener">flow of value</a>”.</p>



<p>What makes DevOps exciting is the culture behind it. The practices and tools are just the means of achieving a certain culture. If you try to implement DevOps but don’t adopt the correct mindset and culture behind it, then you are going to end up with a boring and ineffective implementation.</p>



<h3>Fewer Natural Learning and Growth Opportunities</h3>



<p>A stable DevOps lifecycle will inherently bring a lower number of emerging technologies and opportunities to integrate emerging technologies. Sure, early on in DevOps adoption, the emerging tech will be all the rage, but that will subside as stability and consistency are driven into the pipeline.</p>



<p>Since continuous improvement is a fundamental principle of DevOps, teams should be encouraged to do some data-driven analysis looking for opportunities to become more efficient in their delivery cycles.</p>



<p>Pivots can also be made within the team. Someone who is primarily focused on ops should be put in a position to both share what they are doing and also be presented with opportunities to look at other fields like coding or security. This is true for all specialties that make up a function DevOps team.</p>



<h3>Comfort in Previous Success</h3>



<p>All too often, I see companies in the industry falling back on the comfort of their successes as an excuse to not rapidly evolve. DevOps should be putting companies in a position where pivots are much easier to pull off. Secondarily keeping a DNA of being lean and nimble should be a focus of any company.</p>



<p>Any company sitting back on its heels thinking it can keep doing what they are doing forever is going to be consumed by its competitors operating at a different level. Break that cycle by listening to the opportunities being presented by your DevOps Engineers and your Software Engineers to keep DevOps from becoming boring and your company from stagnating.</p>



<h3>Never Being Complete or Finished</h3>



<p>When completing a project, a person can get a huge dopamine rush along with a personal sense of accomplishment. DevOps doesn’t really offer that in large quantities. Work is much more methodical, incremental, and bite-sized meaning a team’s ability to celebrate a big win is less frequent.</p>



<p>If you want to truly adopt a culture of continuous improvement, you need to make sure that your team is constantly learning and improving their knowledge. This means your team should be continually looking for new books, podcasts, and ways that they can expand their skill set, improve their knowledge, and learn new things.</p>



<p>When DevOps is paired with Agile, those opportunities are even more spread apart. Everyone on the team is incrementally feeding their work into a larger integrated system. Resources may be assigned to a larger initiative for only a short period of time before being rolled off to another set of work.</p>



<h3>DevOps Engineers are a Figment of your Imagination</h3>



<p>A DevOps Engineer does not exist. They are not real. Yetis are more real than DevOps Engineers are.</p>



<p>DevOps is a methodology and a culture that does not require a role engineer it. There are many engineering practices that compose a full team practicing DevOps. Confusion about what someone is really intended to be working on will leave those individuals to fend for themselves and miss out on a healthy team dynamic.</p>



<p>When culture is suffering in a team practicing DevOps it can become boring or worse extremely frustrating. There is not a shared vision or goal that team is trying to achieve. This means that the work being performed is being done in isolation and under-appreciated. Let’s face it, we are not doing our jobs for our own health, we do them to contribute to something bigger than ourselves.</p>



<h3>The Hype Train</h3>



<p>I see a lot of posts on <a target="_blank" rel="noreferrer noopener" href="https://www.reddit.com/">Reddit</a> which have individuals from different disciplines looking to make the jump from their current career path over to DevOps. Most of what I read leads me to believe that they are being sold a bill of goods which just isn’t reality.</p>



<p>While I do believe that problem-solving in a space fully embracing DevOps is more complex than in any more traditional space, I do not believe that most companies are embracing DevOps fully. This means that job applicants are applying for and landing DevOps positions that are not actually meeting the spirit of DevOps. Organizations are generally looking for a little bit of help automating some manual processes but stop short of full adoption.</p>



<p>This will lead engineers to be as bored at this new shiny DevOps role as they were in their former system administration role.</p>



<h3>Running out of People to Blame</h3>



<p>Office politics can be entertaining to some. In a fully functioning DevOps culture, everything is treated as code, tested in code, operations happen in code, and releases are automated all of which remove a lot of formal human interaction in the daily development and release cycle.</p>



<p>Game of Thrones was not popular because Joffrey methodically picked apart Rob Stark and his armies. GoT was popular because of the drama, suspense, twists, and turns. Now, the office should not be a Game of Thrones style drama, but; DevOps is very good at transitioning from a culture full of interpersonal conflict into a blameless culture focused purely on technology which can be boring.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What Are Some Examples of Engineers Boredom Executing DevOps?</h2>



<p>Below are some examples of different roles and how they can become bored with their job when DevOps is being practically utilized for its processes but not viewed as a persistent growth opportunity.</p>



<h3>Debbie Developer has a Case of the Mondays</h3>



<p>Debbie became a software engineer because of her love for puzzles. Solving complex scenarios and producing elegant maintainable code is her passion.</p>



<p>Early on in the DevOps adoption process, she was jazzed that there was a whole host of new problems to solve when transforming a traditional set of build jobs into something that could support CI/CD.</p>



<p>As time has progressed, she is feeling less fulfilled in her day-to-day job. The kinds of work she is performing have become far less complex and much smaller. There is almost no coordination between members of her team since she can just push code at will and let automation take over to push it into production.</p>



<p>It is the same daily slog over and over and over again.</p>



<h3>Simon the Systems Administrator is Running Out of Work To Do</h3>



<p>Servers create themselves. Simon doesn&#8217;t need to log into the <a href="https://aws.amazon.com/" data-internallinksmanager029f6b8e52c="14" title="AWS" rel="nofollow noopener" target="_blank">AWS</a> console anymore to check anything because the platform is completely self-service.</p>



<p>When adopting DevOps, systems administrators will often find themselves developing a lot of code around system configurations. This works well because in their specific domain, they want consistency and operational efficiency.</p>



<p>Over time, Simon&#8217;s work has been extremely helpful in level-setting expectations around solid delivery patterns. But what is next for Simon? There does not appear to be any new or related systems on the horizon for Simon to continue to grow his skills. Growth has stagnated and there really isn&#8217;t a path forward for Simon to earn a senior systems administrator position.</p>



<h3>Quintin Feels Like Their Role as a Quality Assurance Engineer is Monotonous</h3>



<p>Developers are writing their own unit, functional, and integration acceptance tests. Quintin is left building some visual testing to be added to the delivery pipeline.</p>



<p>Quality assurance engineers are the glue that holds a development community together. They are well-versed in requirements and testing and they are constantly working with their developer counterparts to ensure their work will be accepted by customers.</p>



<p>DevOps can take away this sense of community in the development process. Individuals are responsible for contributing their own tests while they write code. As tests are passed, the code moves its way into production.</p>



<p>DevOps has effectively worked Quintin out of a job.</p>



<h3>Connie the Cloud Engineer is Struggling to Provide Value</h3>



<p>DevOps pipelines will consist of application code, test automation, system automation, and infrastructure automation (cloud or on-prem). Once developed, engineers will shift focus to day 2 operations. Once day 2 operations are tackled, what&#8217;s left?</p>



<p>Connie felt value and excitement in the early days of DevOps, but is now isolated away from the rest of the team because systems have been stabilized, security is second nature, and AWS is effectively running itself.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>5 Tips to Make DevOps Exciting Again!</h2>



<p>We’ve covered why DevOps can become tedious, but what can you do about it? If you want to make DevOps exciting again, then you have to understand why it is exciting in the first place!</p>



<p>The reason DevOps is exciting for most companies is because of the focus on drastically improving your software development process. It’s a way of improving communication, collaboration, and the overall quality of your software. It’s a way of adopting a culture of automation.</p>



<p>Automation is important in DevOps because it directly impacts the speed of your software release cycles. It can also help improve the overall quality of your software as well as your organization.</p>



<p>Automation is a core component of DevOps. When you make automation a core part of your development process, you are able to reduce the number of repetitive tasks your organization has to perform. This means you can put less focus on manual tasks, and more focus on things that actually improve your software and the company as a whole.</p>



<h3>Provide Growth Opportunities</h3>



<p>Some companies confuse growth with “opportunities to become a manager”. Most of the really good engineers and architects that I have met will “manage” a project because they want to see it succeed not because they want to be a manager.</p>



<p>Providing opportunities for growth in knowledge, automation, systems, development, operations, platforms, consulting, or any other area that your services or products may not be fully taking advantage of today.</p>



<p>As an example, if you have an awesome set of pipelines that obfuscate some of the complexities of doing automated delivery, challenge your team to package that up and white-label it. Have them use those packages to consult with other teams in your organization to level their automation skills up.</p>



<h3>Inject Failures</h3>



<p>We are always focused on delivering key projects, functionality, or needs of the business. With a narrow view of the world being delivered first, that does not leave a lot of room to poke at the softer edges of your products.</p>



<p>Introduce automated failure models like a chaos monkey. Start with planned times and have your chaos monkey start to take down some low criticality services and review the characteristics of what that means. There may be impacts in areas that you were not expecting.</p>



<p>This provides an opportunity to add some advanced troubleshooting to an area that the DevOps methodology took away through its inherent consistency and stability.</p>



<h3>Incorporate User Feedback Into DevOps Processes</h3>



<p>User feedback is important to any business because it allows you to understand your customers and discover ways to improve your product. However, user feedback is hard to come by because customers don’t usually interact with businesses on a consistent basis.</p>



<p>In order to incorporate user feedback into your software development lifecycle, you need to be able to get consistent feedback from customers. There are two main ways to do this:</p>



<ul>
<li>Use survey tools to let customers provide feedback on your product, team, and company.</li>



<li>Let customers interact with your team using live chat tools.</li>
</ul>



<p>Both of these tools are easy to implement and can help you get useful and consistent feedback from customers. Feedback is also a great way to breathe some excitement into an otherwise stagnant work environment.</p>



<h3>Be Realistic with Expectations</h3>



<p>As I stated above, DevOps Engineers are not real. Business leaders need to come to grips with this fact and be very realistic with expectations around roles and work assignments. If you are looking to shortcut full DevOps adoption by hiring some DevOps engineers as a gap fill, you will not be able to provide an exciting environment that keeps your technology groups engaged.</p>



<h3>Celebrate Completion</h3>



<p>Get your teams together to do some good old-fashioned team building. Wins are wins no matter how big or small they are. Recognize your team’s accomplishments because they deserve to be recognized.</p>



<p>The methodical pace of DevOps and Agile do not lend themselves to recognizing big wins or the sheer volume of work that it really takes to get to those wins. Team leads should focus on bringing their teams back to the center by recapping how much success they have had knowing their work is never done.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>DevOps is not boring. It is an exciting change in the way that organizations approach software development. However, it is only exciting if you fully commit to the culture of DevOps and all the benefits it has to offer.</p>



<p>If you just implement the tools and processes without the culture and mindset, then you are only doing half the work and missing out on the benefits of the fully implemented DevOps culture.</p>



<p>If you want to make DevOps exciting again, you must ensure that you are fully committed to the culture. Only then will you be able to make the most of everything that DevOps has to offer.</p>
]]></content:encoded>
					
		
		
		<media:content url="https://www.youtube.com/embed/bP5nWWFV2gg" medium="video" width="1280" height="720">
			<media:player url="https://www.youtube.com/embed/bP5nWWFV2gg" />
			<media:title type="plain">Why DevOps is Boring in 2022</media:title>
			<media:description type="html"><![CDATA[DevOps is a hot topic in the technology world. It’s no longer just an isolated set of tools and processes which promise an automated future, it’s an entire c...]]></media:description>
			<media:thumbnail url="/wp-content/uploads/2022/11/devops-boring.jpg" />
			<media:rating scheme="urn:simple">nonadult</media:rating>
		</media:content>
	</item>
		<item>
		<title>DevOps Cycle Times: The Difference Between Good and Bad Performance</title>
		<link>https://www.valewood.org/devops-cycle-time/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Mon, 21 Nov 2022 14:12:25 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[devops cycle time]]></category>
		<category><![CDATA[sdlc]]></category>
		<guid isPermaLink="false">/?p=1700</guid>

					<description><![CDATA[The performance of the DevOps cycle is a crucial measure of your success. If it’s good, you are on track to meet your objectives; if it’s bad, you need to make some changes. The DevOps cycle performance has three main&#8230;]]></description>
										<content:encoded><![CDATA[
<p>The performance of the <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> cycle is a crucial measure of your success. If it’s good, you are on track to meet your objectives; if it’s bad, you need to make some changes. The DevOps cycle performance has three main factors: lead time, cycle time, and throughput.</p>



<p>You can use these metrics to inform your team about where there may be issues in your process that need addressing. Each of these factors indicates a different part of the DevOps cycle:</p>



<ul>
<li><strong>Lead time</strong> refers to the total length of time from when an order is placed until it is sent out for delivery.</li>



<li><strong>Cycle time</strong> is how long it takes from when a new version of code is checked in to when it becomes available for production users. It measures how much time elapses between every phase of production and points out potential bottlenecks in your process.</li>



<li><strong>Throughput</strong> measures how many units are produced within a specific timeframe (e.g., the number of orders per hour).</li>
</ul>



<p>When monitoring the performance of these metrics, it is important to keep them balanced across all three categories; if one value falls too low or high, adjustments may need to be made.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Lead Time</h2>



<p>The lead time is the length of time it takes from when an order is placed until it is sent out for delivery. To improve this, you can look at two aspects of your process: Shipping and Demand management.</p>



<p>If shipping is taking a long time, check that your team is following a strict process for shipping that is as streamlined as possible. This way, it will be much easier to track and make improvements. If demand management is the issue, you might need to review your sales strategy.</p>



<p>How many orders are being placed per day is the first thing to look at. If demand is low, you can consider ways to increase it, such as marketing campaigns. If orders are high, you might have trouble meeting them due to the length of time it takes to process them. If it is taking a long time to fulfill orders, you can use a kanban board to track them and make sure they don’t get stuck in the process.</p>



<h2>Cycle Time</h2>



<p>Cycle time is the time it takes from when a new version of code is checked in to when that code becomes available for production users. It measures how much time elapses between every phase of production and points out potential bottlenecks in your process.</p>



<p>To improve this, you can look at two aspects of your process: Code deployment and Testing. If it is taking a long time to deploy code, check the tools you are using; they may not be working as efficiently as they could. If testing is taking too long, you might need to add more resources to your testing team.</p>



<h2>Throughput</h2>



<p>Throughput is the number of units produced within a specific timeframe. If throughput is low, you may have too high a lead time for your cycle time. This can be corrected by improving your shipping process or by reducing the time it takes to produce the product.</p>



<p>If throughput is high, you may have too low a cycle time for your lead time. This can be corrected by reducing the time it takes to produce the product or by increasing the time it takes to send it out.</p>



<h2>Continuous Improvement Strategies</h2>



<p>There are several strategies you can employ to improve the efficiency of your DevOps cycle, including:</p>



<ul>
<li>Reducing the time it takes to complete all processes, such as testing and deployment.</li>



<li>Reallocating employees to where they are needed most, such as adding more people to your testing team if testing is taking too long.</li>



<li>Streamlining processes, such as using a kanban board to improve visibility and reduce bottlenecks.</li>



<li>Improving software quality, such as using automated tests and code reviews to catch issues early.</li>



<li>Improving your customer experience, such as tracking customer complaints and addressing them promptly.</li>
</ul>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>The performance of the DevOps cycle is a crucial measure of your success. If it’s good, you are on track to meet your objectives; if it’s bad, you need to make some changes. The DevOps cycle performance has three main factors: lead time, cycle time, and throughput.</p>



<p>You can use these metrics to inform your team about where there may be issues in your process that need addressing. Each of these factors indicates a different part of the DevOps cycle:</p>



<ul>
<li><strong>Lead time </strong>refers to the total length of time from when an order is placed until it is sent out for delivery.</li>



<li><strong>Cycle time</strong> is how long it takes from when a new version of code is checked in to when it becomes available for production users. It measures how much time elapses between every phase of production and points out potential bottlenecks in your process.</li>



<li><strong>Throughput</strong> measures how many units are produced within a specific timeframe (e.g., the number of orders per hour).</li>
</ul>



<p>When monitoring the performance of these metrics, it is important to keep them balanced across all three categories; if one value falls too low or high, adjustments may need to be made.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The Importance of Constant Monitoring and Feedback</title>
		<link>https://www.valewood.org/devops-monitoring/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 19 Nov 2022 20:39:50 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[day2ops]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[devops monitoring and feedback]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=1674</guid>

					<description><![CDATA[DevOps is an approach to software development and operation, where teams are able to collaborate more effectively and accelerate software releases from development to production. As a result, organizations can release new features faster and with higher quality. The need&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> is an approach to software development and operation, where teams are able to collaborate more effectively and accelerate software releases from development to production. As a result, organizations can release new features faster and with higher quality.</p>



<p>The need for speed and collaboration across departments is what’s driving many organizations toward DevOps. But it’s not just about faster software releases; it’s about releasing higher quality software faster by enabling the people who build and support applications (known as operators) to react to changing conditions quickly, proactively, and directly.</p>



<p>In this blog post, we will discuss why monitoring and feedback are critical in accelerating your path toward DevOps while maintaining your company’s high standards for quality.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Why is Monitoring so Important in a DevOps Environment?</h2>



<p>All organizations should be monitoring their software and the underlying infrastructure on which their applications run. But when you’re implementing a DevOps approach, monitoring becomes even more important because it provides visibility into the application environment and alerts when things are not running as expected.</p>



<p>With a traditional software development lifecycle, engineers would build the application, test it, and then push it out to a staging server environment where operations professionals would monitor it to make sure it’s up and running. When the app was determined to be good to go, the operations team would then push it out to production.</p>



<p>In a DevOps environment, the handoff between development and operations happens much more frequently. In some cases, developers may be responsible for deploying to production or at the very least, testing their code on staging servers before operations engineers deploy it to production.</p>



<p>With the rapid releases that happen to production in a DevOps environment, small changes can have large impacts on the reliability and stability of applications.  By building monitoring and observability directly into a delivery pipeline, the parties responsible for shipping code are the same parties responsible for making sure that the code is operating as expected.  </p>



<p> DevOps advocates for smaller more frequent releases meaning drift can happen over time.  Features that performed well several months ago may have gotten incrementally worse over time.  Observability helps identify these issues and ensures that future work is scheduled to adequately remediate issues from organic growth before they turn into production outages.</p>



<h3>The Importance of Monitoring in a DevOps Environment</h3>



<p>As we’ve discussed, there are many benefits to implementing a DevOps model versus a traditional software development lifecycle. But what exactly does monitoring have to do with DevOps? It’s no coincidence that monitoring is one of the core components of DevOps.</p>



<p>The mere act of monitoring software, infrastructure, and network performance is the important first step in taking advantage of the benefits of DevOps. And when you’re monitoring, you’re also able to analyze and gain insight into your current state based on real-time data.</p>



<p>While companies are in the process of implementing a DevOps approach, monitoring becomes even more important as it can help you identify potential bottlenecks in your software delivery pipeline.</p>



<h2>Benefits of Monitoring in a DevOps Environment</h2>



<ul>
<li><strong>Increased insight into the current state: </strong>Monitoring gives you the ability to see and understand the current state of your applications, network, and infrastructure. Without monitoring, you would have no visibility into the current state, which makes it more difficult to identify issues and resolve them.</li>



<li><strong>Sensitivity to application issues: </strong>When you’re monitoring, you’re able to quickly detect issues, both big and small, that disrupt the flow of your business. This includes issues such as a website or app outage, poor performance, increased latency, security issues, and more.</li>



<li><strong>Ability to resolve issues quickly: </strong>When monitoring is part of your software delivery pipeline and you’re able to recognize and resolve issues quickly, you’re able to decrease the amount of time it takes to restore normal operations.</li>



<li><strong>Predictability: </strong>Monitoring also gives you the ability to predict what will happen next, which can be helpful when planning for upcoming events such as conferences or holidays. By understanding the current state, you can predict what might happen next and prepare for it.</li>
</ul>



<h2>Monitor Constantly to Understand the Current State Continuously</h2>



<h3>Machine Data</h3>



<p>Data points that are generated and collected by application and infrastructure monitoring tools are known as machine data. Machine data is a fantastic source of data to understand the current state of your applications. Machine data is generated and collected at the application level, which gives you an accurate representation of what is happening in your environment.</p>



<h3>Human-Generated Data</h3>



<p>As you’re monitoring, you also capture human-generated data, which is data that is entered into the system manually. For example, if you receive a ticket about a performance issue, this would be recorded as human-generated data. Although human-generated data is not as accurate as machine data, it gives insight into what is happening in the application environment.</p>



<h2>Monitor Constantly to Understand Why Something Happened</h2>



<p>Monitoring gives you the ability to understand why something happened, which can be beneficial when it comes to debugging issues and resolving them quickly.</p>



<h3>Application Logs</h3>



<p>Application logs are a fantastic source of why something happened because they show a timeline of events. This can help you identify bottlenecks in your application, when various events occur, when errors are thrown, and much more.</p>



<h3>Tracing</h3>



<p>Tracing is another source of why something happened. Tracing is a way to visualize the path that packets take as they move through the network. This can be helpful if you notice something in the application logs, but you’re not sure where the problem is.</p>



<h2>Monitor Constantly to Predict What Will Happen Next</h2>



<p>Monitoring gives you the ability to predict what will happen next by giving you insight into the current state as well as why certain things happened. This can be helpful when planning for upcoming events such as conferences or holidays.</p>



<h3>Application Performance</h3>



<p>By understanding the current state, you can predict what will happen next with application performance. This can help you proactively prepare for upcoming events that require a heavier lift, such as sales or Black Friday events.</p>



<h3>System Performance</h3>



<p>There are several cardinal sins when it comes to system monitoring.</p>



<ul>
<li>Running out of disk space</li>



<li>Memory swapping to disk</li>



<li>Connectivity issues</li>



<li>CPU being pegged at 100% constantly</li>
</ul>



<p>Any of these issues (along with dozens of other cardinal sins) are the types of issues that don&#8217;t get forgiven often when they show up in an RCA.  By doing trend analysis on systems, capacity can more readily be predicted and proper measures can be taken before the only corrective action is to buy more hardware.</p>



<h3>Storage Performance</h3>



<p>Systems like databases, email servers, or any system which is trying to serve up real-time data in milliseconds are going to be sensitive to storage anomalies.  Disk fails, redundant paths are taken offline for maintenance, patching happens, and each of these events has the possibility of drastically changing the operating state of an application.  Consistently monitoring to ensure you are staying well away from your upper bounds will keep the focus off one of the most integral and sensitive parts of any ecosystem.</p>



<h3>Network Performance</h3>



<p>Monitoring also allows you to understand the current state of network performance. This can help you predict what will happen next by allowing you to proactively prepare for higher levels of network traffic.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>Monitoring is one of the core components of DevOps and is the important first step in taking advantage of the benefits of DevOps. By implementing a DevOps approach, monitoring becomes even more important because it provides visibility into the application environment and alerts when things are not running as expected.</p>



<p>Machine data is a fantastic source of data to understand the current state of your applications. Monitoring also gives you the ability to understand why something happened, which can help you debug issues and predict what will happen next.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Why You Need to Build A Culture of Trust and Respect in DevOps</title>
		<link>https://www.valewood.org/devops-trust/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 12 Nov 2022 22:45:48 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[devops trust]]></category>
		<guid isPermaLink="false">/?p=1657</guid>

					<description><![CDATA[Trust and respect are essential ingredients in any healthy working environment. When trust and respect are present, team members feel safe to give their best, collaborate openly, and challenge one another constructively. When trust and respect are absent, team members&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Trust and respect are essential ingredients in any healthy working environment. When trust and respect are present, team members feel safe to give their best, collaborate openly, and challenge one another constructively.</p>



<p>When trust and respect are absent, team members feel insecure about their performance, withhold ideas for fear of judgement or worry about repercussions if they speak up.</p>



<p>There is an inherent risk in bringing together people from different backgrounds with different skill sets. And in the context of <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a>, you’re also putting together people who likely have very different roles within your organization as well. The potential for discord is high.</p>



<p>So how do you create a culture of trust and respect when working with so many new and different people? Here’s why you need to build a culture of trust and respect in your DevOps initiative.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>It’s the Foundation for Good Communication</h2>



<p>Communication is the foundation for everything in DevOps. You have to be able to openly share what’s working, what isn’t, and why without judgement, without fear of repercussions, and without ego getting in the way.</p>



<p>What happens when, in a meeting, someone says they aren’t getting the information they need from a team member? Or that they feel rushed to get their job done? Or that they aren’t seeing the value in the continuous integration process?</p>



<p>Without a culture of trust and respect, communication will be strained. Team members will be hesitant to speak up, and afraid of judgement. They’ll feel anxious like they don’t have permission to be honest with the team.</p>



<p>And if they don’t feel safe speaking up, the communication breaks down, and the DevOps initiative will suffer as a result.</p>



<h2>It Builds Confidence for Everyone</h2>



<p>One of the biggest challenges in DevOps is building trust between different people, and different parts of the organization. But if you lack the confidence to speak up, you’ll never be able to build that trust missing out on the opportunity to learn from your colleagues and grow yourself as a result.</p>



<p>In a culture where trust and respect are absent, people are less likely to share their ideas, and more likely to either shut down and not try at all, speak up in ways that create discord, and don’t encourage others to respond.</p>



<p>You need to feel confident to share your ideas, challenge others, and learn from both your successes and your mistakes. Without trust and respect, you won’t feel confident enough to do any of these things, and again, the DevOps initiative will suffer as a result.</p>



<h2>It Creates a Safe Environment For Learning</h2>



<p>A healthy DevOps culture needs to create a safe environment for learning. This means not only being transparent about what’s working and what isn’t, but also being open to feedback without fear of judgement.</p>



<p>This is the best way to identify pain points and areas where improvement is needed. When team members feel safe to share their feedback, they can do so in a way that doesn’t create any sense of judgement, but rather, encourages the team to look at the information objectively and decide how to act on it.</p>



<p>But when a team is operating in a culture where trust and respect aren’t present, this kind of feedback is very tricky to navigate. Because team members are likely to feel anxious about sharing their true feelings and experiences, and will likely speak up in ways that are designed to minimise judgement. This can lead to misunderstood feedback, and squashing the open and objective dialogue that is needed for improvement.</p>



<h2>DevOps is About People and Culture</h2>



<p>All of the above leads us to one important conclusion: building a healthy DevOps culture is about people and trust. Building trust and respect is never a one-time thing, and it requires a sustained effort from all members of the team, regardless of their backgrounds.</p>



<p>When you see a team member struggling to find their footing, or growing frustrated at their role, you have to be willing to lend a helping hand. And to do this, you must first be aware of your own behaviour and how you’re modelling the behaviour you want to see.</p>



<p>You must be willing to confront your own behaviours that are likely to be creating a culture that is lacking in trust and respect. And you must be willing to take ownership of your own feelings and be open about how they are impacting your work and the team as a whole.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>DevOps is all about collaboration, communication and cooperation. When everyone on the team trusts and respects each other, they are much more likely to collaborate effectively. This can only happen when everyone feels safe to give their opinion and be open about their needs. Building a culture of trust and respect will take time and effort. However, it is well worth the effort as it will lead to better communication, a healthier team, and ultimately better results for your organization.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How do Agile and DevOps Interrelate?</title>
		<link>https://www.valewood.org/devops-and-agile/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 05 Nov 2022 20:49:28 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[delivery]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[devops and agile]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=1264</guid>

					<description><![CDATA[DevOps (an abbreviation of developer operations) is the marriage between software development and IT operation. It’s a term used to describe practices and technologies aimed at bringing together software engineers and IT professionals to produce software more efficiently. In this&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> (an abbreviation of developer operations) is the marriage between software development and IT operation. It’s a term used to describe practices and technologies aimed at bringing together software engineers and IT professionals to produce software more efficiently.</p>



<p>In this blog post, we’ll cover the main principles of DevOps and its interrelation with Agile. It can be challenging for teams that are new to both concepts at the same time, but they really make sense when taken in their entirety. In other words, by following these steps, you’ll be able to create an effective DevOps culture within your organization.</p>



<p>So, how do agile and DevOps interrelate?</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What is DevOps?</h2>



<p>DevOps is a transformation aimed at integrating the software development and operations teams from a business perspective. It’s a combination of techniques found in Lean and Agile methodologies, and it’s used to transform the way organizations produce software.</p>



<p>DevOps merges the disciplines of development and operations to create a more efficient process that successfully addresses the challenges faced by businesses today. DevOps is an umbrella term that describes a set of processes aimed at bridging the gap between software development and IT operations.</p>



<p>I think this is the first key to explaining how agile and DevOps interrelate. In a more traditional approach, there are generally a series of handoffs between different responsibilities in an organization. When trying to understand how agile and DevOps work together, start by visualizing a world where handoffs do not happen anymore. This will immediately produce savings over the life cycle of your products.</p>



<p>Agile teams are also unique in their own right when compared to a more traditional organizational structure. An agile team is going to consistently be reviewing their development processes for areas of improvement. This is going to allow for meaningful growth and promote a model focused on continuous integration and continuous delivery.</p>



<h2>What Makes DevOps Different from Other Methodologies?</h2>



<p>DevOps integrates the development and operations teams into a single functional delivery team. From a business perspective, it focuses on creating product delivery cycles that solve real problems instead of just churning out code for the sake of producing code.</p>



<p>By combining these disciplines developers can spend less time dealing with the complexities of big bang releases and more time creating new rapidly developed incremental features. This is because the process is automated.</p>



<p>This helps organizations achieve high software quality, fast delivery, and easier adaptation to the market. To end-users, DevOps looks like this: When a team of developers wants to create a new feature, they can rapidly plan, prototype, adjust, and release that feature to start realizing the value of that work.</p>



<p>Agile development methodologies are usually found with any functional DevOps team. When looking at a more traditional project management methodology like Waterfall, anyone trying to implement DevOps will generally stop short at automating infrastructure as code. A project utilizing the Agile DevOps methodology will take that several steps further.</p>



<p>An Agile DevOps team will focus on automating the entire process. Continuous integration will be utilized as a cornerstone to build a robust framework to test and deploy their software. The end goal is to transition into a model of continuous delivery to enable many releases to production in a single day.</p>



<p>Day 2 operations will be integrated into their technology pipelines as well. Tools and automation will be built to take care of more routine tasks such as certificate renewals or auto-remediation. Because DevOps pipelines are test-driven, future unexpected changes are also quickly identified and fixed much more easily.</p>



<h2>What Makes a More Traditional SDLC Risky?</h2>



<p>When working in a more traditional software methodology software moves down an assembly line with bigger changes leading to larger risk.</p>



<p>New features are approved and then tested, followed by regression, and finally deployed to production. This is the most traditional way to work with code. However, it is not always the most efficient way to work with code.</p>



<p>Changes to the code base should be approached from the perspective of the risk involved with any change. When working with big changes in the code base, it is important to look at the big picture of the software. If you are only focused on one aspect of the software, even though it might be the most crucial aspect, you risk overlooking something else that is just as important.</p>



<p>Big-picture thinking is achieved by working with the whole software. If you are building a new feature, you need to start with a new branch of the code base. Without testing the new code, you risk breaking something else in the software. Once you are sure there are no errors in the new code, you can start the testing process. After you are certain the new code has no bugs, you can release it to your production environment.</p>



<p>When the process relies on larger changes, with more complex processes, and more opinions about quality in every decision being made down the assembly line there is a higher likelihood that project timelines will slip or never be delivered at all.</p>



<h2>The Importance of Collaboration in DevOps</h2>



<p>DevOps is the marriage between software development and IT operations. It’s a term used to describe practices and technologies aimed at bringing together software engineers and IT professionals to produce software more efficiently.</p>



<p>In this marriage, there must be a collaboration between the teams involved. This collaboration allows for a better understanding of each other’s roles, and for the shared goal of creating better software with minimal time and effort.</p>



<p>DevOps is key to transforming the operations side of an organization and allowing everyone involved to create high-quality, reliable software. And collaboration between the teams is what allows for this.</p>



<h2>Establishing a Culture of Collaboration for Success in DevOps</h2>



<p>Before you can start implementing DevOps in your organization, you need to establish a culture of collaboration between the teams involved. DevOps is a marriage between teams, and successful marriages are built on communication and a mutual understanding of what both parties bring to the table.</p>



<p>To create this culture, you’ll want to start by determining which members of your organization are involved in the transformation. You can do this by identifying the individuals who are responsible for bringing the different teams together (such as product managers, architects, developers, and operations staff).</p>



<p>You can also do a deeper dive into how the teams interact with each other. Ask yourself:</p>



<ul>
<li>What information does each team need from the other?</li>



<li>What do they do with that information?</li>



<li>What are their roles and responsibilities?</li>
</ul>



<p>This will help you determine where the gaps are between the teams and what needs to change.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What is Agile?</h2>



<p>Agile has been used in the software development community for a long time, but DevOps has brought it to the forefront.</p>



<p>Agile is a collection of methodologies based on rapid, evolutionary development. It’s about understanding your business needs and developing products and services to meet them.</p>



<p>This type of development is often referred to as evolutionary development, and it’s meant to be a continuous process. This means that in order to adjust to changes in your business, you’ll need to adjust your processes accordingly.</p>



<p>Evolutionary development has many advantages over traditional methods of development, such as waterfall. Waterfall is a method that focuses on a single target release date, and it’s often used in traditional methodologies.</p>



<h2>The Importance of Agility in Digital Development</h2>



<p>Agile development emphasizes the need for constant communication and collaboration between the teams responsible for product development. This communication is key to the success of the transformation, and it’s achieved by bringing together architects, product managers, developers, and operations staff.</p>



<p>By bringing everyone together, you’ll be able to understand their roles and responsibilities and make adjustments as necessary. And, most importantly, you’ll be able to communicate better and collaborate.</p>



<p>By developing products and services that respond to the needs of your customers, you’ll be able to create better software with minimal effort.</p>



<p>When you develop products that your customers actually want, they’re going to be much happier with your software. It’s important to remember that creating customer value is the goal of every business process. Finding ways to make your own business process more efficient is important, but it’s even more critical to focus on customer value.</p>



<h2>Interaction Between Agile and DevOps Principles</h2>



<p>Many people are under the assumption that DevOps and Agile are two different methods, when, in fact, they’re both about rapid, continuous improvement. There are some differences between them, but both focus on bringing the best out of their team members.</p>



<p>Both DevOps and Agile are about collaboration between teams, and both aim to create high-quality, reliable software. But clearly, there are differences between the two. Let’s take a look at some of the similarities between the two methodologies.</p>



<p>Both DevOps and Agile work best when they are integrated. The goal of an integrated approach is to produce high-quality software as quickly as possible. Through the collaboration between developers, testers, operations staff, and other members of the team, you can achieve a faster turnaround time for your software.</p>



<p>To make this collaboration possible, teams must adhere to certain principles such as communication, consistency, and agility.</p>



<p>Additionally, an integrated DevOps and Agile approach can help to reduce the risk of software defects. To accomplish this, you must work with your team to create automated tests for your software.</p>



<p>By integrating DevOps and Agile development processes, you can increase your team’s overall quality. Through testing, you can catch problems before they are shipped to customers. Operations can also be integrated into the process, reducing bottlenecks and increasing the speed of software releases.</p>



<p>These principles aren’t rigid rules; rather, they’re guidelines for implementing good practices for developing software and delivering it more efficiently. They aren’t meant to replace traditional methods of doing business or IT operations; rather, they complement them in order to achieve greater results as quickly as possible.</p>



<h3>Being Agile with DevOps</h3>



<p>DevOps is based on an Agile mindset. It’s an approach to agile software development and software delivery. This means developers and operations professionals must collaborate closely to create a better product in the shortest amount of time possible.</p>



<h3>Being Lean with DevOps</h3>



<p>Lean principles are also important in DevOps, but they are used differently than they are in traditional lean methodologies. These principles focus on continuous improvement, continuous learning, and continuous feedback. The overall goal is to make the process more efficient by minimizing waste and increasing quality.</p>



<h2>Limitations of Traditional Methods of Software Development</h2>



<p>Traditional methodologies are focused on creating a single version of the truth, which can be a limitation if you want to adapt to changing business needs. DevOps, on the other hand, is all about continuous change, so it can be challenging to adapt to that. While related, the need to be agile is a significant difference between DevOps and traditional methodologies.</p>



<h2>Advantages of DevOps over Traditionally practiced methodologies</h2>



<p>The main advantage of DevOps over traditional methodologies is that it helps organizations create better software with minimal effort. With traditional methodologies, such as Waterfall, there is a high probability that the software will not be delivered on time and within budget, and that can be a significant problem. With DevOps, on the other hand, it’s important to note that there’s a difference between creating better software and just producing more of it.</p>



<h2>Conclusion</h2>



<p>DevOps is a transformation aimed at bringing together the disciplines of development and operations to produce high-quality software. It’s a marriage between the teams involved, and it needs to be built on communication and collaboration. DevOps is key to transforming operations and allowing everyone to create high-quality, reliable software. And collaboration between teams is what allows for this. DevOps is the marriage between software engineers and IT professionals.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How to Modify VMWare ESXi Guest Files with Ansible</title>
		<link>https://www.valewood.org/ansible-modify-vmware-esxi-guest-file/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Fri, 28 Oct 2022 01:25:15 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Ansible]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=1232</guid>

					<description><![CDATA[This post will help anyone who is attempting to use ansible to modify files on VMs running on ESXI via automation when Practicing DevOps. This method assumes that you have cloned out a machine, but do not yet have network&#8230;]]></description>
										<content:encoded><![CDATA[
<p>This post will help anyone who is attempting to use <a href="https://www.ansible.com/" data-internallinksmanager029f6b8e52c="7" title="Ansible">ansible</a> to modify files on VMs running on ESXI via automation when <a href="https://www.valewood.org/practicing-devops/">Practicing DevOps</a>.  This method assumes that you have cloned out a machine, but do not yet have network access to that machine meaning you would need to utilize native ESXi methods to get communication setup.  </p>



<p>I use methods like this in my home lab to help stay current with new trends in <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> Not everyone is going to be fortunate enough to have cloud playgrounds to test out new things, and home labs are a great way to make a one-time investment in your future.</p>



<p>The code for the project can be found <a href="https://github.com/gwagner/ansible-examples/tree/main/modify-vmware-esxi-guest-file" target="_blank" data-type="URL" data-id="https://github.com/gwagner/ansible-examples/tree/main/modify-vmware-esxi-guest-file" rel="noreferrer noopener">here</a>!</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Prerequisites</h2>



<p>This article is going to assume that you already have VMWare running in a home lab somewhere. This also assumes that you have some familiarity with VMware and networking.</p>



<p>This post will also assume that you have already installed a baseline OS running open-vm-tools. <a href="https://www.packer.io/" data-internallinksmanager029f6b8e52c="17" title="Packer" target="_blank" rel="noopener">Packer</a><a href="https://www.packer.io/" target="_blank" rel="noreferrer noopener"></a> is a good tool to use to automate your baseline operating system installation to create a reusable disk image.</p>



<p>You may also want to read <a href="https://www.valewood.org/ansible-create-vmware-esxi-vm/" data-type="post" data-id="1213">this post</a> to get a good feeling about how to automate cloning images when vSphere or Center are not available solutions.</p>



<h2>Terms</h2>



<ul>
<li><strong>ansible_host:</strong> A subkey of an invnetory definition that sets an alternative way to target a server in inventory.</li>



<li><strong>Connection local: </strong>At the playbook level, you can set <code>connection: local</code> to ensure that all connections are being sent to localhost (much like <code>delegate_to</code>).  I almost never use this simply because i generally want control over my connections at the task level, not the playbook level.</li>



<li><strong>delegate_to:</strong> A majority of this playbook is setup with <code>delegate_to: localhost</code>. This means that the delegated host running the Ansible script will also execute anything with the defined <code><code>delegate_to</code>: localhost</code>.</li>



<li><strong>Delegated host:</strong> If ServerA is the machine with a terminal you are running Ansible from, and your target is ServerB; if you also set <code>delegate_to: ServerB</code>, Then ServerB is also the delegated host which is running the ansible code.  Ansible is passing the action off from the server where ansible was initiated from to a different remote host.</li>



<li><strong>Inventory hostname:</strong> Ansible-playbooks requires that inventory be setup for group targeting.  Each host is defined with a hostname as a top level key.  This term is a bit of misnomer since you can give Ansible any hostname you want and configure <code>ansible_host</code> as an alternative targeting mechanic, like IP address.</li>



<li><strong>Remote Host / Remote Machine:</strong> The server you are targeting remotely with Ansible</li>
</ul>



<h2>The Playbook</h2>



<p>Below is the full code to copy SSH keys to a newly cloned machine, and set an IP address with a NetworkManager restart.</p>



<p>The general idea is to run <code>ansible-playbook modify-vmware-esxi-guest-file.yaml -i inventory.yaml</code> from your command line.  The playbook will then connect to ESXi and create a .ssh folder on your fresh machine.  It will then copy your local <code>/home/user/.ssh/id_rsa.pub</code> file to the remote machine.  Finally, it will run <code>/bin/nmcli </code>commands to get a static IP address set on the VM.</p>



<p>Since the remote machine from inventory exists but is not yet able to be connected to <code><code>delegate_to</code>: localhost</code> is necessary of you would immediately receive an ansible connection error.</p>



<pre class="wp-block-code yaml"><code>---
- name: Modify VMWare ESXi VM File
  hosts: all
  gather_facts: false
  tasks:
    - include_vars: config.yaml
      delegate_to: localhost

    - include_vars: creds.yaml # Remember, this should be in a vault
      delegate_to: localhost   # These creds are for example use only

    - name: Create .ssh folder
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        directory:
          path: "/home/user/.ssh/"
          operation: create
          recurse: no
      delegate_to: localhost

    - name: Copy RSA to VM
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        copy:
          src: "/home/user/.ssh/id_rsa.pub"
          dest: "/home/user/.ssh/authorized_keys"
          overwrite: yes
      delegate_to: localhost

    - name: Run command inside a virtual machine
      community.vmware.vmware_vm_shell:
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        vm_shell: "{{ item.shell }}"
        vm_shell_args: "{{ item.args }}"
      loop:
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.ignore-auto-dns yes" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.address \"{{ vmware.ip_address }}/24\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.gateway \"{{ vmware.gateway_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.dns \"{{ vmware.dns_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.method manual" }
        - { shell: "/bin/systemctl", args: "NetworkManager restart" }
      delegate_to: localhost

</code></pre>



<h2>Task By Task Breakdown</h2>



<p>To not rehash details I have gone through in other articles, you can find a breakdown of the inventory, credentials, and config in <a href="https://www.valewood.org/ansible-create-vmware-esxi-vm/#penci-A-Task-By-Task-Breakdown" data-type="URL" data-id="/ansible-create-vmware-esxi-vm/#penci-A-Task-By-Task-Breakdown">this post.</a></p>



<p>The first step of this playbook is to create a users .ssh folder so an authorized_keys file can be created.  The playbook makes an assumption that your user is named&#8230; user, but that could be modified and turned into a configuration parameter pretty quickly.  I will break down each of the config parameters below:</p>



<ul>
<li><strong>validate_certs</strong> is set to false because most of us are not going to be using trusted 3rd party certs in our VMware environment. If you are doing this in a professional environment, ensure you have valid certs installed and leave validate_certs set to the default of true.</li>



<li><strong>validate_certs</strong> should also be set to false if you are connecting to your VMWare server via IP address since your cert will not match an IP address.</li>



<li><strong>vmware_user</strong> and vmware_password should be set to a user that has SSH access to your VMWare server. I would not recommend that you do this in any sort of production environment, but it is perfectly fine for a home lab.</li>



<li><strong>datacenter</strong> is set to ha-datacenter. This is the default name of a “datacenter” in ESXi. There is no reason to change this.</li>



<li><strong>vm_id</strong> is either the exact case-sensitive name of the virtual machine being configured.  If you created your machine using ansible, then make sure you map the name you gave it here via variables.</li>



<li><strong>vm_username</strong> and vm_password is in reference to the user you setup when creating your template or disk image.  ESXi needs this to effectively run an interactive login to the server to perform your commands.</li>



<li><strong>directory</strong> is signifying that our action is going to be taken on a directory.  In the next task you will see that we use the copy key instead of directory but we are utilizing the exact same module.</li>



<li><strong>directory.path</strong> is the path on the ESXi guests that you want to take action on.</li>



<li>directory.operation denotes what we want to have happen.  In this case, we are going to create a directory.</li>



<li><strong>directory.recurse </strong>tells ansible if it should send a command that recursively creates directories.  If your default user is not named user, you would end up with a /home/user/.ssh directory that will be fairly useless.</li>
</ul>



<pre class="wp-block-code yaml"><code>    - name: Create .ssh folder
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        directory:
          path: "/home/user/.ssh/"
          operation: create
          recurse: no
      delegate_to: localhost</code></pre>



<p>This next task does a copy of a file from the machine you executed the ansible playbook from onto the ESXi guest that we are configuring.  In the interest of brevity, I am not going to rehash the duplicate keys from above.  Here are the specific keys of interest in this task:</p>



<ul>
<li><strong>copy</strong> denotes that we want to copy a file.  The file needs to exist on your source system and will be copied to the ESXi guest.</li>



<li><strong>copy.src</strong> is the path to the source file.  As you can see, we are targeting the public key here.</li>



<li><strong>copy.dest</strong> is the full path to the destination.   As you can see we are targeting an authorized_keys file as the destination.  This could be dangerous if that file already exists as it will be overwritten.</li>



<li><strong>copy.overwrite</strong> ensures that we will clobber whatever exists on the destination system with the file from our source system.</li>
</ul>



<pre class="wp-block-code yaml"><code>    - name: Copy RSA to VM
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        copy:
          src: "/home/user/.ssh/id_rsa.pub"
          dest: "/home/user/.ssh/authorized_keys"
          overwrite: yes
      delegate_to: localhost</code></pre>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<p>This last task is composed a bit differently.  Effectively it is being used to run a series of nmcli commands along with a single systemctl command to set a static IP address for this machine.  I have this task composed this way to clean up ansible code.  This could be written as six fully independent tasks in ansible, but remember to stay DRY and don&#8217;t repeat yourself.  Here is a breakdown of the specific keys of interest:</p>



<ul>
<li><strong>vm_shell</strong> represents the exact path to the command that is going to be run on the ESXi guest.  Do not include command arguments in this field, the documentation specifically states that it wants a full path to an executable.</li>



<li><strong>vm_shell_args</strong> represents the arguments to the vm_shell command.  </li>



<li><strong>loop</strong> controls how the task will loop through the data defined underneath.  I have the keys setup as dictionary objects so that we get both shell executables and arguments from the loop.</li>
</ul>



<pre class="wp-block-code"><code>    - name: Run command inside a virtual machine
      community.vmware.vmware_vm_shell:
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        vm_shell: "{{ item.shell }}"
        vm_shell_args: "{{ item.args }}"
      loop:
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.ignore-auto-dns yes" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.address \"{{ vmware.ip_address }}/24\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.gateway \"{{ vmware.gateway_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.dns \"{{ vmware.dns_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.method manual" }
        - { shell: "/bin/systemctl", args: "NetworkManager restart" }
      delegate_to: localhost</code></pre>



<h2>Conclusion</h2>



<p>As you can see, with a fairly concise set of steps, you can level up your DevOps automation game by rapidly configuring virtual machines in your home lab.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
