<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>opinion &#8211; A DevOps Blog</title>
	<atom:link href="https://www.valewood.org/tag/opinion/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.valewood.org/</link>
	<description>Occasionally a developer makes an Ops!</description>
	<lastBuildDate>Wed, 12 Oct 2022 02:28:18 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.2</generator>

<image>
	<url>https://www.valewood.org/wp-content/uploads/2022/08/A-DevOoops-1-e1660773390219.png</url>
	<title>opinion &#8211; A DevOps Blog</title>
	<link>https://www.valewood.org/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Is DevOps a Skill?</title>
		<link>https://www.valewood.org/devops-skills/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Wed, 12 Oct 2022 02:17:36 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[delivery]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[opinion]]></category>
		<guid isPermaLink="false">/?p=1103</guid>

					<description><![CDATA[This is a pretty loaded question. Is cooking a skill? Are home builders skilled or unskilled labor? A skill would denote being able to do something well or having expertise in practice. Skills can be trained! Being in a field&#8230;]]></description>
										<content:encoded><![CDATA[
<p>This is a pretty loaded question.  Is cooking a skill?  Are home builders skilled or unskilled labor?  A skill would denote being able to do something well or having expertise in practice.  Skills can be trained!  Being in a field of skilled labor like running CNC equipment requires a tremendous amount of skill.</p>



<p>So, is <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="Demystifying the DevOps Methodology and How You Can Leverage it for Success!â€‹" target="_blank" rel="noopener">DevOps</a> a skill or is it a logical evolution where technology delivery ends up going regardless of the forces that drive it there?</p>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h2>Technology Delivery</h2>



<p>Delivering technology, with any kind of <a href="https://www.valewood.org/topics/devops/benefits-of-devops/devops-culture-of-quality/" data-type="page" data-id="1036">quality</a> backing that delivery, will require several different practices.  Depending on your domain; you will probably employ the specialties of software developers, infrastructure/cloud engineers, quality assurance engineers, security engineers, and network engineers, along with a whole host of other roles.  Each of those roles is critical to the successful execution of a project at a very high standard.  </p>



<p>Once the technology is delivered to the market, someone is going to have to pick up the mantle and run that technology solution.  In some organizations that will be a dedicated operations team, and in others they will adhere to a &#8220;you build it you own it&#8221; strategy.</p>



<p>One of the biggest misnomers that I run across quite frequently is this; once a project is launched, the skilled labor that developed that project is no longer needed over the lifetime of that technology.  I believe that this could not be further from the truth.</p>



<h2>Technology Lifecycle > Delivery</h2>



<p>I prefer to look at technology through the lens of a lifecycle rather than a static point-in-time delivery.  Once a technology product is launched, it needs a tremendous amount of care and feeding to ensure that it remains valuable to its end users.  </p>



<p>Due to the complex nature of the domains that I generally work in, this means that the skilled labor that helped produce said technology product will continue to have a hand in that technology product for its entire lifecycle.  It does not mean that they will be entirely dedicated to a single effort, but it does mean they will continue to lend their expertise.</p>



<p>So, how does this answer the question &#8220;Is DevOps a skill?&#8221;.  For me, the answer is a simple one, YES!  But I think that it first takes an understanding of what <a href="https://www.valewood.org/topics/devops/" data-type="page" data-id="505">DevOps</a> is.</p>



<h2>What is DevOps?</h2>



<p>DevOps is a series of practices that combine together into a consistent delivery flow for technology.  It is generally misrepresented as purely automation, but that is only a particular skilled practice inside DevOps.  Embracing DevOps fully is a serious commitment to changing how technology delivery is performed, and full adoption means that you will be more interested in the overall lifecycle of technology instead of just finite delivery points in time.</p>



<h2>What Expertise is Needed for DevOps?</h2>



<p>I believe that most organizations are following a more traditional software delivery methodology.  They have not adopted DevOps or agile in any meaningful way, and if they have at the very least adopted agile they are not using a standardized framework.  This is not true everywhere, but I believe it is more true than false.</p>



<h3>Advocating for and Leading Change</h3>



<p>Since most organizations are building and deploying software with some degree of success in whatever way works for them, to build real DevOps adoption, a change agent is going to need to be bravely thrown into the mix to help drive the change they want to see in the world.</p>



<p>Let&#8217;s face it, Change is hard.  Change brings the unknown right to our doorsteps and forces us to confront aspects of our work that may feel uncomfortable.  Depending on your level in an organization, either being an advocate for change or leading through change is a trainable skill that individuals should look into developing.</p>



<h3>Agile Project Management</h3>



<p>Project management is a pretty crowded space.  There are plenty of certifications out there that individuals can go get to skill up in this space as well.  But, agile project management is not just for project managers, everyone should become well versed in this space.</p>



<p>Learning about risks and risk management, work breakdown structures, timelines, forecasting, Gantt charts, resource management, and all of the rest of the highly skilled practices in agile project management will only enhance a DevOps team&#8217;s ability to deliver effective and high-quality solutions.  If a project manager is left to fully manage a project independently while engineers are heads down in code and poorly communicating, that project is doomed for failure from the very beginning.</p>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h3>Transforming Communication</h3>



<p>In order to adopt effective DevOps practices, a team will need to build effective communication patterns.  </p>



<p>Some organizations will adopt a pattern of tickets first.  &#8220;If it isn&#8217;t in the ticket, it didn&#8217;t happen&#8221;.  This is a great asynchronous communication pattern that ensures that communication is available more broadly to any consumers that may have questions or need updates.  It is an ineffective communication pattern if nobody ever reads the tickets.</p>



<p>Other organizations will adopt in-person or remote scrums to talk about what they worked on, will be working on, and challenges.  This can be a really good communication pattern for individuals who like to talk through and collaborate on problems.  This is a terrible pattern when it comes to groups that are spread a little too thin or have a WIP problem.</p>



<p>Communication must work for the individuals who are producing communication and consuming communication.  I have seen multiple different scenarios fail because members of the team are not willing to adapt to each other and ensure success.  There are a tremendous number of tools on the market, I am confident that any team willing to put in the work to find the right one can become effective communicators.</p>



<h3>Effective Feedback Loops</h3>



<p>Along with communication, feedback loops are also incredibly important to a DevOps team.  If automated testing fails, where do notifications go?  If there is a problem with production, where does communication go?  If these two events, or many other different kinds of events, impact delivery; where does that communication go?</p>



<p>By ensuring that feedback is making its way back to the proper parties, more effective data-driven decision-making can happen.  Without feedback loops from tools, systems, or people; we are all left guessing!</p>



<h3>Tools Tools Tools</h3>



<p>10 years ago, the market for DevOps tools (technology tools) was pretty sparse.  You were left with bash scripts on Linux servers, limited API access, and using your legs to walk down to your local data center to pop in the newest RedHat CD.</p>



<p>Today, the number of tools in the DevOps space is expansive.  I am not going to go too deep into the tooling here because of its depth, but any DevOps team worth its weight will need to have some serious skills with the latest DevOps tools.</p>



<h2>Conclusion</h2>



<p>I wrote this post to answer the question, &#8220;Is DevOps a skill?&#8221;.  I believe that the answer to that question is a resounding yes.  It is as much of a skill as sculpting clay into a piece of art or customizing a classic car.  There is a high degree of depth in expertise for a DevOps team to be effective in their delivery processes.  Finally, any organization out there that thinks they are doing DevOps without these skills is not fully realizing the benefits that DevOps has to offer.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Do DevOps engineers need a coding background?</title>
		<link>https://www.valewood.org/do-devops-engineers-need-a-coding-background/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Mon, 19 Sep 2022 21:55:03 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[coding]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[opinion]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=326</guid>

					<description><![CDATA[The primary skill sets that DevOps engineers need are either in the system administration or software development space. Those 2 foundational skill sets will help any team build some cool solutions to complex problems. There are fringe cases where the&#8230;]]></description>
										<content:encoded><![CDATA[
<p>The primary skill sets that <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="Demystifying the DevOps Methodology and How You Can Leverage it for Success!â€‹" target="_blank" rel="noopener">DevOps</a> engineers need are either in the system administration or software development space.  Those 2 foundational skill sets will help any team build some cool solutions to complex problems.  There are fringe cases where the skillset matures outside of those two primary skill sets. Whichever skillset is lacking when making the transition from traditional delivery patterns over to a more DevOps-focused delivery pattern will need to be picked up to ensure that the team has a complete understanding of the technology stack. A system administrator will not need to become a full software developer, and a software developer will not need to become a veteran system administrator.</p>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h2>Role Separation</h2>



<p>First, let&#8217;s dive into role separation.  I am a firm believer in specialization in job functions.  Someone who is a jack of all trades is also generally not a master at any of them.  Individuals on the team should not be looking to be a master at every part of their delivery pipeline but they should be in a position where they are picking up adjacent skills to help backup their team members when needed.  A software developer does not need to be intimately familiar with every intricate detail of a backup solution but should know how to retrieve and restore backups when necessary.  A system administrator does not need to dive deeply into SQL query optimization, but knowing how to write and retrieve data from the database is a useful skill to help support the team.</p>



<h2>Software Development</h2>



<p>Now, this is a bit of an unfair section because I believe that the software development side of DevOps does need a coding background.  How are you going to do software development without that?</p>



<p>In all seriousness, I believe the question &#8220;Do DevOps engineers need a coding background?&#8221; can be extended into the Ops and Infrastructure space pretty easily.  Software developers should be familiar with the basic fundamentals of a data center or cloud depending on where your solution(s) is/are hosted.  If you are in a data center, become familiar with fault domains, SANs, LUNs, or anything that may impact the stability or performance of your application.  In the cloud, become familiar with the cloud&#8217;s elastic nature of volumes, instances, and services.</p>



<p>Along with the familiarity with computing platforms, it will be advantageous to also familiarize yourself with solution delivery and system configuration.  Solution delivery and delivery pipelines are essential to a good DevOps background.  In my experience, most developers are really good at utilizing their ecosystems to compile a binary or build out a package.  Aside from SFTPing that package out to a server and bouncing a service the idea of automated blue/green solution delivery flow with configuration management, rollbacks,  database updates, monitoring changes, etc. is not the norm.  </p>



<p>You SFTPers out there know who you are, don&#8217;t try to deny it.</p>



<p>The primary driver behind configuration management is trying to hit the gold standard of immutable infrastructure.  While application code is being perpetually updated and changed, servers should be treated like cattle instead of pets.  We should be able to easily destroy and fully rebuild a server and deploy the newest version of the application on top of it.  This helps keep things clean and up to date.</p>



<h2>System Administrators</h2>



<p>As system administrators make the transition from the GUI to doing DevOps, they will be faced with many challenges where a coding background can really help out.  </p>



<p>DevOps is all about automating the flow of delivery through resilient pipelines to increase quality.  To do this, most of your work is going to be through scripts or tools like <a href="https://www.chef.io/" data-internallinksmanager029f6b8e52c="8" title="Chef">Chef</a>, Terraform, <a href="https://puppet.com/" data-internallinksmanager029f6b8e52c="9" title="Puppet">Puppet</a>, CloudFormation, etc.  Composing individual scripts for individual tasks is a good place to start, but will quickly become overwhelming if you are not embracing a more generated approach.  </p>



<p>Now, all teams are going to be set up a bit differently, but a common thread across all of them will be the scale of technology becoming overwhelming at some point.  One day you may be looking at fifteen servers/services and the next day your product explodes in popularity and you are dealing with thousands of servers/services.  Take a step back and ask yourself how you can use business logic to generate your infrastructure, monitoring, configurations, backups solutions, etc.  This approach will make something that feels unmanageable and makes it manageable again.</p>



<h2>Conclusion</h2>



<p>Do DevOps engineers need a coding background?  My perspective is, that it wouldn&#8217;t hurt.  Diving into software development patterns and extending them into the DevOps delivery space allows for greater consistency, along with the ability to scale to meet demand much more quickly without feeling overwhelmed.  I don&#8217;t think that software developers need to become the best systems administrators ever created.  I don&#8217;t think that systems administrators need to become the greatest software developers ever created.  I do think that everyone in technology could benefit from a bit of exposure to spaces outside of their primary responsibilities because it lends itself well to increasing quality and flexibility while delivering solutions.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
