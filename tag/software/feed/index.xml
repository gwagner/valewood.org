<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>software &#8211; A DevOps Blog</title>
	<atom:link href="https://www.valewood.org/tag/software/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.valewood.org/</link>
	<description>Occasionally a developer makes an Oops!</description>
	<lastBuildDate>Mon, 05 Sep 2022 16:47:38 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.2</generator>

<image>
	<url>https://www.valewood.org/wp-content/uploads/2022/08/A-DevOoops-1-e1660773390219.png</url>
	<title>software &#8211; A DevOps Blog</title>
	<link>https://www.valewood.org/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Why are CI/CD Pipelines Part of DevOps?</title>
		<link>https://www.valewood.org/why-are-ci-cd-pipelines-part-of-devops/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Mon, 05 Sep 2022 16:47:35 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[sdlc]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=312</guid>

					<description><![CDATA[Introduction CI/CD pipelines are a key part of the DevOps process. They allow you to automate the process of getting your code from development to production through CI/CD. CI/CD stands for Continuous Integration and Continuous Deployment. This helps to speed&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>Introduction</h2>



<p>CI/CD pipelines are a key part of the DevOps process. They allow you to automate the process of getting your code from development to production through CI/CD.  CI/CD stands for Continuous Integration and Continuous Deployment. This helps to speed up the process and ensure that your code is always in a ready-to-deploy state. There are a number of different tools that you can use for creating DevOps pipelines. You can think of it like an assembly line where technology components and quality checks and gates are passed on the way to production. A more apt analogy would be the assembly line in the manufacturing industry where physical products are made. Think of a car made of parts going down a conveyor belt to different stations where it is assembled. A DevOps pipeline is kind of like that. But instead of cars, DevOps pipelines are for software and applications. And instead of physical parts, they are for software components like source code and automated scripts.</p>



<p>There are several key parts of the assembly line that must be considered. The key parts of a successful DevOps pipeline are all continuous; integration, delivery, testing, monitoring, feedback, and operations.</p>



<h2>The DevOps <s>Assembly Line</s> CI/CD Pipeline</h2>



<h3>Continuous Integration</h3>



<p>Integration is the process whereby all developers make their code changes available to other team members. This is often done using a source code repository and an automated build step. Developers, ops, qa, etc. all contribute to the same process which enhances the same product with everybody moving the same automobile down the assembly line together.</p>



<p>Most organizations have a &#8220;git&#8221; repository that holds all the source code. This can be a private repository, shared publically, or a combination of both. It is commonly referred to as a &#8220;<a href="https://www.github.com/" data-internallinksmanager029f6b8e52c="6" title="Github" rel="nofollow noopener" target="_blank">GitHub</a>&#8221; or &#8220;GitLab&#8221; repository. Utilizing feature branching strategies, build or feature flags, and a myriad of other code organization strategies; the code repository becomes the central hub for all work happening in and around the technology product.</p>



<h3>Continuous Delivery</h3>



<p>Delivery is the process whereby the integrated code changes are deployed to a test or production environment. It involves package or container creation, deployment, and feature enablement in a production environment. The overall scope of work is narrowed down from large unwieldy projects to something more complementary to a single bolt being added to a car or truck. In the physical world, those incremental steps are not only performed, but in our modern industrial assembly lines, the impact wrench which is utilized will measure and record the torque applied while the car is being assembled. Continuous delivery is no different. Code should always be ready to be deployed to production because every minor tweak, change, or enhancement is fully tested as it is added to the code repository.</p>



<h3>Continuous Testing</h3>



<p>Testing is the stage where the output of delivery is tested to ensure that it performs as expected in a testing environment. The gold standard here is to ensure that 100% of your application is fully tested on every single commit. Full coverage testing is often used when developing in an agile or Scrum environment, where developers will have small, incremental changes to the code. When modernizing an application where automated testing was not done from the start, you may see much lower percentages as you get your application up to spec. This is OK! Make sure testing is a focus and a breakpoint is added where it no longer becomes acceptable to not test changes.</p>



<h3>Continuous Monitoring and Feedback</h3>



<p>I am going to let you in on a secret, &#8220;humans are not robots&#8221;. This means that we are going to make mistakes. It is just part of the job. Mistakes should always be an acceptable part of the work done in the technology sector. Here is what should really drive people crazy instead of mistakes, not knowing when mistakes were made or when something fails. So, what can we do about it? Simply put, build some observability!</p>



<p>Observability, a common NFR in technology, is the concept that not only should your technology have some up/down state monitoring behind it, but you should be able to also get good telemetry around the full set of business processes as well. Looking at some basic observability items such as activity counters, page performance and event timing, errors, failures, success, etc. you can build a set of observability around key metrics which tell you can line up to show the differences between how you expect your application to be performing versus the reality of how it is performing.</p>



<p>When it comes to Continous Feedback, now that we are in this panacea of speedy and rigorously tested application deployments, we can get this observability feedback into the hands of our DevOps teams to ensure that appropriate changes are put into the application. Without good early feedback supported by a mountain of data, the team will be left guessing. Let’s be honest, everyone on the team needs this feedback. The DevOps team doesn’t need to know everything. They do need to know enough to assess whether or not the changes they make to the application are safe and meet business requirements.</p>



<p>Regardless of whether you’re building a standalone product or a company, the key takeaway here is that you want to be thinking about observability in terms of the business process as a whole paired directly with technology. A car company is not going to set out to produce the next top-of-the-line pickup truck and end up with a Pontiac Aztec unless something goes very wrong while nobody is looking.</p>



<h3>Continuous Operations</h3>



<p>Everyone is responsible for operations. Product Managers, Developers, CEOs, Finance and Accounting, and Operations; everybody shares some role in the responsibility. When it comes to DevOps the role of operations is filtered directly into the central workstreams of the team. When an outage occurs, RCAs and post-mortems do not stop at a ceremonial activity. They are carried through to completion with real changes being put in place. Utilizing all of the aforementioned steps of the assembly line, the DevOps team is able to more quickly remediate issues that either show up due to mistakes or show up due to the growth of a system over time.</p>



<p>One of the core things to remember about operations is that technology does not age well. The longer something is running in the wild, the frailer it will get. Think about it this way; if you never service your car, the engine will start to overheat, your tires will start to go bald, and you may run out of blinker fluid. As time goes on, the car gets more and more unreliable. This is true of any technology as well. Operations needs to be accessible to everyone, and it needs to be prioritized in a way that allows for a healthy mix of feature functionality and operations to coexist.</p>



<h2>Conclusion</h2>



<p>In conclusion, DevOps Pipelines can be easily attributed to an assembly line of technology. Through a set of core principles, like always being ready for production, along with integrated technology which promotes testing, monitoring, feedback, and observability the pipeline approach enables organizations to achieve rapid time-to-market and continuous delivery of software products and services (and they can enjoy the velocity and quality benefits at a fraction of the cost).</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How DevOps Can Improve Your Technology Stack</title>
		<link>https://www.valewood.org/how-devops-can-improve-your-technology-stack/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sun, 04 Sep 2022 18:50:18 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=304</guid>

					<description><![CDATA[Introduction DevOps is a set of practices that combines software development and operations to improve the speed, quality, and reliability of software delivery. DevOps is about collaboration and communication between development and operations teams. In many instances, these 2 teams&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>Introduction</h2>



<p>DevOps is a set of practices that combines software development and operations to improve the speed, quality, and reliability of software delivery. DevOps is about collaboration and communication between development and operations teams.  In many instances, these 2 teams are combined into one providing a shared focus and shared set of responsibilities.  The team becomes responsible for the entire lifecycle surrounding a set of technology.  The strategic themes for this team center around automating the software delivery process so that software can be delivered faster, with fewer errors. DevOps is a relatively new concept, but it’s quickly gaining popularity because it’s an effective way to improve the technology stack. In this article, we’ll explore how DevOps can improve your technology stack.</p>



<h2>What is DevOps?</h2>



<p>DevOps is a software development methodology that seeks to automate the software delivery process. The goal of DevOps is to improve the speed, quality, and reliability of software delivery by integrating software development and operations.  This shared responsibility builds on a set of common goals which may have caused tension in the past.  Development teams have been traditionally focused on shipping new features while handing those features off to the operations team to run them.  The operations team was then responsible for running something they did not build and may have had additional considerations to improve overall quality.</p>



<p>Combining Development and Operations together nets out a single team that can view the entire landscape of technology improving visibility which improves decision-making.  There is a misnomer out there in the industry which drives me bonkers, and that is the idea of a &#8220;Full Stack Engineer&#8221;.  I don&#8217;t actually know what that is, do you?  My best guess is that a hiring manager needs A LOT of skills and doesn&#8217;t have the budget to pay for them.  Instead, by building a &#8220;Full Stack Team&#8221; someone could yield all of the benefits of a &#8220;Full Stack Engineer&#8221; without overworking any individual contributor. </p>



<p>By employing a more DevOps-focused delivery methodology, businesses can respond more quickly to new market opportunities, deliver products and services with less downtime, and provide more reliable customer experiences.  Everything you need to move large rocks uphill exists inside of a single team with a singular focus.</p>



<h2>The Benefits of DevOps</h2>



<p>If you’re wondering why you should invest time and resources in implementing a DevOps strategy, here are some of the key benefits of DevOps:</p>



<ul><li>Increased speed and agility &#8211; DevOps can help businesses respond more quickly to new market opportunities.  DevOps enables businesses to adapt and respond to changes quickly, while also meeting their service-level agreements (SLAs). It also enables continuous deployment, which means businesses can release software more often.  By releasing more frequently, you’re able to respond quickly when the market changes.</li><li>Higher quality &#8211; DevOps is often associated with implementing automation. By using automation to build, test, and deploy applications, you can catch bugs and other quality issues before they make their way into production. Automation also allows you to test the quality of your application more frequently, which enhances your ability to identify and fix quality issues as soon as possible.</li><li>Better collaboration &#8211; DevOps is a very collaborative approach to software development. When everyone works together to solve problems, issues are identified and resolved more quickly. Plus, collaboration helps teams solve more complex problems, which leads to higher-quality work and more innovative products.</li><li>Reducing risk &#8211; DevOps helps teams identify and mitigate risks early in the software delivery chain, which reduces overall risk. If you’re able to identify risks related to security, architecture, or other factors, you can address them quickly and effectively. This helps your organization avoid costly problems, such as data breaches or system failures.</li><li>More reliable customer experiences &#8211; When customers use your product or service, they expect it to work. By integrating development and operations, DevOps helps teams identify and resolve issues quickly, which means fewer disruptions and fewer outages.</li></ul>



<h2>Implementing DevOps in Your Organization</h2>



<p>If you’re wondering how to get started with DevOps, there are three steps you can take to get your organization on the path toward success.</p>



<ul><li>Build a strong culture of trust &#8211; Successful DevOps implementations depend heavily on trust. Your organization needs to trust that developers and operations personnel will do what’s best for the company. Operations staff needs to trust that developers have the skills and knowledge to deliver what’s needed. So, when you’re first implementing DevOps, focus on building a culture of trust.</li><li>Invest in automation &#8211; Automation is critical to successful DevOps implementations because it enables organizations to release more frequently without increasing risk. Automating application builds, deployments, and tests allows teams to complete tasks more quickly and with fewer errors. Automating environments, such-as infrastructure and application configuration, also helps you avoid hand-crafted environments.</li><li>Create a single source of truth &#8211; A single source of truth refers to a central location where all critical information is stored. It’s critical that all members of the organization have access to this information. By creating a single source of truth, you can create a culture of collaboration and knowledge sharing that’s crucial to DevOps implementation success.</li></ul>



<h2>Conclusion</h2>



<p>As you’ve seen, DevOps is a software development methodology that seeks to automate the software delivery process. The goal of DevOps is to improve the speed, quality, and reliability of software delivery by integrating software development and operations. DevOps has several benefits, including increased speed and agility, increased quality, better collaboration, reduced risk, and more reliable customer experiences. To implement DevOps in your organization, you first need to build a strong culture of trust, invest in automation, and create a single source of truth.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Welcome to A DevOoops</title>
		<link>https://www.valewood.org/welcome-to-a-devooops/</link>
					<comments>https://www.valewood.org/welcome-to-a-devooops/#respond</comments>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sun, 07 Aug 2022 02:36:51 +0000</pubDate>
				<category><![CDATA[Fluff]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=7</guid>

					<description><![CDATA[As developers, we are always under the gun to get X feature shipped, or to get Y Sev 1 resolved as quickly as possible. Sometimes in that quest to service our corpo overlords, an Ooops happens in the middle. That&#8230;]]></description>
										<content:encoded><![CDATA[
<p>As developers, we are always under the gun to get X feature shipped, or to get Y Sev 1 resolved as quickly as possible.  Sometimes in that quest to service our corpo overlords, an Ooops happens in the middle.  That is where this blog comes in!  </p>



<p>I want to talk about technology abstracted from the corporate atmosphere.  There are some really cool things going on out there in space of Development and DevOps, and all that coolness rarely sees the light of day.  Let&#8217;s give it some air here and see what happens <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.valewood.org/welcome-to-a-devooops/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
