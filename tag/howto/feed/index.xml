<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>howto &#8211; A DevOps Blog</title>
	<atom:link href="https://www.valewood.org/tag/howto/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.valewood.org/</link>
	<description>Occasionally a developer makes an Ops!</description>
	<lastBuildDate>Fri, 28 Oct 2022 01:26:41 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.2</generator>

<image>
	<url>https://www.valewood.org/wp-content/uploads/2022/08/A-DevOoops-1-e1660773390219.png</url>
	<title>howto &#8211; A DevOps Blog</title>
	<link>https://www.valewood.org/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>How to Modify VMWare ESXi Guest Files with Ansible</title>
		<link>https://www.valewood.org/ansible-modify-vmware-esxi-guest-file/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Fri, 28 Oct 2022 01:25:15 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Ansible]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=1232</guid>

					<description><![CDATA[This post will help anyone who is attempting to use ansible to modify files on VMs running on ESXI via automation when Practicing DevOps. This method assumes that you have cloned out a machine, but do not yet have network&#8230;]]></description>
										<content:encoded><![CDATA[
<p>This post will help anyone who is attempting to use <a href="https://www.ansible.com/" data-internallinksmanager029f6b8e52c="7" title="Ansible">ansible</a> to modify files on VMs running on ESXI via automation when <a href="https://www.valewood.org/practicing-devops/">Practicing DevOps</a>.  This method assumes that you have cloned out a machine, but do not yet have network access to that machine meaning you would need to utilize native ESXi methods to get communication setup.  </p>



<p>I use methods like this in my home lab to help stay current with new trends in <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="Demystifying the DevOps Methodology and How You Can Leverage it for Success!​" target="_blank" rel="noopener">DevOps</a> Not everyone is going to be fortunate enough to have cloud playgrounds to test out new things, and home labs are a great way to make a one-time investment in your future.</p>



<p>The code for the project can be found <a href="https://github.com/gwagner/ansible-examples/tree/main/modify-vmware-esxi-guest-file" target="_blank" data-type="URL" data-id="https://github.com/gwagner/ansible-examples/tree/main/modify-vmware-esxi-guest-file" rel="noreferrer noopener">here</a>!</p>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h2>Prerequisites</h2>



<p>This article is going to assume that you already have VMWare running in a home lab somewhere. This also assumes that you have some familiarity with VMware and networking.</p>



<p>This post will also assume that you have already installed a baseline OS running open-vm-tools. <a href="https://www.packer.io/" data-internallinksmanager029f6b8e52c="17" title="Packer" target="_blank" rel="noopener">Packer</a><a href="https://www.packer.io/" target="_blank" rel="noreferrer noopener"></a> is a good tool to use to automate your baseline operating system installation to create a reusable disk image.</p>



<p>You may also want to read <a href="https://www.valewood.org/ansible-create-vmware-esxi-vm/" data-type="post" data-id="1213">this post</a> to get a good feeling about how to automate cloning images when vSphere or Center are not available solutions.</p>



<h2>The Playbook</h2>



<p>Below is the full code to copy SSH keys to a newly cloned machine, and set an IP address with a NetworkManager restart.</p>



<p>The general idea is to run <code>ansible-playbook modify-vmware-esxi-guest-file.yaml -i inventory.yaml</code> from your command line.  The playbook will then connect to ESXi and create a .ssh folder on your fresh machine.  It will then copy your local <code>/home/user/.ssh/id_rsa.pub</code> file to the remote machine.  Finally, it will run <code>/bin/nmcli </code>commands to get a static IP address set on the VM.</p>



<p>A majority of this playbook is also setup with <code>delegate_to: localhost</code>. This means that the computer running the ansible script will also execute anything with the defined <code><code>delegate_to</code>: localhost</code>. Since the remote machine from inventory exists but is not yet able to be connected to <code><code>delegate_to</code>: localhost</code> is necessary of you would immediately receive an ansible connection error.</p>



<pre class="wp-block-code yaml"><code>---
- name: Modify VMWare ESXi VM File
  hosts: all
  gather_facts: false
  tasks:
    - include_vars: config.yaml
      delegate_to: localhost

    - include_vars: creds.yaml # Remember, this should be in a vault
      delegate_to: localhost   # These creds are for example use only

    - name: Create .ssh folder
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        directory:
          path: "/home/user/.ssh/"
          operation: create
          recurse: no
      delegate_to: localhost

    - name: Copy RSA to VM
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        copy:
          src: "/home/user/.ssh/id_rsa.pub"
          dest: "/home/user/.ssh/authorized_keys"
          overwrite: yes
      delegate_to: localhost

    - name: Run command inside a virtual machine
      community.vmware.vmware_vm_shell:
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        vm_shell: "{{ item.shell }}"
        vm_shell_args: "{{ item.args }}"
      loop:
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.ignore-auto-dns yes" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.address \"{{ vmware.ip_address }}/24\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.gateway \"{{ vmware.gateway_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.dns \"{{ vmware.dns_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.method manual" }
        - { shell: "/bin/systemctl", args: "NetworkManager restart" }
      delegate_to: localhost

</code></pre>



<h2>Task By Task Breakdown</h2>



<p>To not rehash details I have gone through in other articles, you can find a breakdown of the inventory, credentials, and config in <a href="https://www.valewood.org/ansible-create-vmware-esxi-vm/#penci-A-Task-By-Task-Breakdown" data-type="URL" data-id="/ansible-create-vmware-esxi-vm/#penci-A-Task-By-Task-Breakdown">this post.</a></p>



<p>The first step of this playbook is to create a users .ssh folder so an authorized_keys file can be created.  The playbook makes an assumption that your user is named&#8230; user, but that could be modified and turned into a configuration parameter pretty quickly.  I will break down each of the config parameters below:</p>



<ul><li>validate_certs is set to false because most of us are not going to be using trusted 3rd party certs in our VMware environment. If you are doing this in a professional environment, ensure you have valid certs installed and leave validate_certs set to the default of true.</li><li>validate_certs should also be set to false if you are connecting to your VMWare server via IP address since your cert will not match an IP address.</li><li>vmware_user and vmware_password should be set to a user that has SSH access to your VMWare server. I would not recommend that you do this in any sort of production environment, but it is perfectly fine for a home lab.</li><li>datacenter is set to ha-datacenter. This is the default name of a “datacenter” in ESXi. There is no reason to change this.</li><li>vm_id is either the exact case-sensitive name of the virtual machine being configured.  If you created your machine using ansible, then make sure you map the name you gave it here via variables.</li><li>vm_username and vm_password is in reference to the user you setup when creating your template or disk image.  ESXi needs this to effectively run an interactive login to the server to perform your commands.</li><li>directory is signifying that our action is going to be taken on a directory.  In the next task you will see that we use the copy key instead of directory but we are utilizing the exact same module.</li><li>directory.path is the path on the ESXi guests that you want to take action on.</li><li>directory.operation denotes what we want to have happen.  In this case, we are going to create a directory.</li><li>directory.recurse tells ansible if it should send a command that recursively creates directories.  If your default user is not named user, you would end up with a /home/user/.ssh directory that will be fairly useless.</li></ul>



<pre class="wp-block-code yaml"><code>    - name: Create .ssh folder
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        directory:
          path: "/home/user/.ssh/"
          operation: create
          recurse: no
      delegate_to: localhost</code></pre>



<p>This next task does a copy of a file from the machine you executed the ansible playbook from onto the ESXi guest that we are configuring.  In the interest of brevity, I am not going to rehash the duplicate keys from above.  Here are the specific keys of interest in this task:</p>



<ul><li>copy denotes that we want to copy a file.  The file needs to exist on your source system and will be copied to the ESXi guest.</li><li>copy.src is the path to the source file.  As you can see, we are targeting the public key here.</li><li>copy.dest is the full path to the destination.   As you can see we are targeting an authorized_keys file as the destination.  This could be dangerous if that file already exists as it will be overwritten.</li><li>copy.overwrite ensures that we will clobber whatever exists on the destination system with the file from our source system.</li></ul>



<pre class="wp-block-code yaml"><code>    - name: Copy RSA to VM
      community.vmware.vmware_guest_file_operation:
        validate_certs: false
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        copy:
          src: "/home/user/.ssh/id_rsa.pub"
          dest: "/home/user/.ssh/authorized_keys"
          overwrite: yes
      delegate_to: localhost</code></pre>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<p>This last task is composed a bit differently.  Effectively it is being used to run a series of nmcli commands along with a single systemctl command to set a static IP address for this machine.  I have this task composed this way to clean up ansible code.  This could be written as six fully independent tasks in ansible, but remember to stay DRY and don&#8217;t repeat yourself.  Here is a breakdown of the specific keys of interest:</p>



<ul><li>vm_shell represents the exact path to the command that is going to be run on the ESXi guest.  Do not include command arguments in this field, the documentation specifically states that it wants a full path to an executable.</li><li>vm_shell_args represents the arguments to the vm_shell command.  </li><li>loop controls how the task will loop through the data defined underneath.  I have the keys setup as dictionary objects so that we get both shell executables and arguments from the loop.</li></ul>



<pre class="wp-block-code"><code>    - name: Run command inside a virtual machine
      community.vmware.vmware_vm_shell:
        hostname: "{{ vmware_host }}"
        username: "{{ vmware_user }}"
        password: "{{ vmware_password }}"
        datacenter: ha-datacenter
        vm_id: "{{ vmware.name }}"
        vm_username: "{{ centos_template_user }}"
        vm_password: "{{ centos_template_password }}"
        vm_shell: "{{ item.shell }}"
        vm_shell_args: "{{ item.args }}"
      loop:
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.ignore-auto-dns yes" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.address \"{{ vmware.ip_address }}/24\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.gateway \"{{ vmware.gateway_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.dns \"{{ vmware.dns_address }}\"" }
        - { shell: "/bin/nmcli", args: "connection modify ens192 IPv4.method manual" }
        - { shell: "/bin/systemctl", args: "NetworkManager restart" }
      delegate_to: localhost</code></pre>



<h2>Conclusion</h2>



<p>As you can see, with a fairly concise set of steps, you can level up your DevOps automation game by rapidly configuring virtual machines in your home lab.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Convert Text File to JSON with Ansible</title>
		<link>https://www.valewood.org/ansible-text-to-json/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Mon, 24 Oct 2022 23:00:00 +0000</pubDate>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Ansible]]></category>
		<category><![CDATA[ansible]]></category>
		<category><![CDATA[howto]]></category>
		<guid isPermaLink="false">/?p=1187</guid>

					<description><![CDATA[I was looking through Reddit today and saw an interesting question about how to manipulate files with Ansible. I took a few minutes to throw together an example of how to convert a relatively simple file, a list of strings&#8230;]]></description>
										<content:encoded><![CDATA[
<p>I was looking through Reddit today and saw an <a href="https://www.reddit.com/r/ansible/comments/ycgtkg/convert_output_of_file_to_json_using_j2_template/" data-type="URL" data-id="https://www.reddit.com/r/ansible/comments/ycgtkg/convert_output_of_file_to_json_using_j2_template/" target="_blank" rel="noopener">interesting question</a> about how to manipulate files with <a href="https://www.ansible.com/" data-internallinksmanager029f6b8e52c="7" title="Ansible">Ansible</a>.  I took a few minutes to throw together <a href="https://github.com/gwagner/ansible-examples/tree/main/read-file-output-json" data-type="URL" data-id="https://github.com/gwagner/ansible-examples/tree/main/read-file-output-json" target="_blank" rel="noopener">an example </a>of how to convert a relatively simple file, a list of strings broken up by new lines, and output it as JSON.  </p>



<p>Doing file conversions or data munging is an important skill to learn when growing in a <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="Demystifying the DevOps Methodology and How You Can Leverage it for Success!​" target="_blank" rel="noopener">DevOps</a> position.  While this is a fairly basic example, utilize this as a stepping stone to understanding more complex data structures.</p>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h2>Simple Text to JSON Conversion with Ansible</h2>



<p>Below is the Ansible code to read in a file name input.txt delimited by newline characters and then do a simple conversion to JSON writing to output.json.</p>



<pre class="wp-block-code yaml"><code>- name: Simple Read file and output JSON
  hosts: localhost
  connection: local 
  become: false
  tasks:
  - name: Read Data File
    set_fact:
      data: "{{lookup('ansible.builtin.file', './input.txt').split('\n')}}"

  - name: Show debug data
    ansible.builtin.debug: var=data

  - name: Write output json file
    copy:
      dest: output.json
      content: "{{ data | to_json }}" </code></pre>



<h3>Task By Task Breakdown</h3>



<p>The first task reads the input.txt file into a data variable that Ansible can use. It also splits the file into a list via the \n (newline) character.</p>



<pre class="wp-block-code yaml"><code>  - name: Read Data File
    set_fact:
      data: "{{lookup('ansible.builtin.file', './input.txt').split('\n')}}"</code></pre>



<p>set_fact can be one of your best friends in Ansible. It allows you to take either data from what you have available in your playbook run, or lookup data and set it to a useable var for future tasks.  Here I am calling lookup to read an input.txt file and saving it to a data var.</p>



<pre class="wp-block-code yaml"><code>  - name: Show debug data
    ansible.builtin.debug: var=data</code></pre>



<p>ansible.builtin.debug lets you output the values of variables to the terminal during a playbook run.  This code should not be utilized anywhere except for testing.</p>



<pre class="wp-block-code yaml"><code>  - name: Write output json file
    copy:
      dest: output.json
      content: "{{ data | to_json }}" </code></pre>



<p>Finally, utilizing the built-in copy module, you can feed it a variable, like data, and then pipe that to a to_json jinja2 function which will then write your file out to dest.</p>



<p>The result of running this playbook will look something like this:</p>



<pre class="wp-block-code json"><code>&#091;"/site/foo/", "/site/bar/"]</code></pre>


<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
</p>



<h2>Complex Text to JSON Conversion with Ansible</h2>



<p>Below is the Ansible code to read in a file name input.txt delimited by newline characters.  After reading the file, a new variable is initialized name data_elements.  A loop is then run to create new dictionary objects with a key of &#8216;name&#8217; and a value of each line of input.txt.  Finally, a copy is run to write the data to disk under output.json.  </p>



<pre class="wp-block-code yaml"><code>- name: Complex Read file and output JSON
  hosts: localhost
  connection: local 
  become: false
  tasks:
  - name: Read Data File
    set_fact:
      data: "{{lookup('ansible.builtin.file', './input.txt').split('\n')}}"

  - name: Show debug data
    ansible.builtin.debug: var=data

  - name: Create a new array
    set_fact: 
      data_elements: &#091;]

  - name: Loop through lines and add data elements to array
    set_fact:
      data_elements: "{{ data_elements + &#091;{'name': item}] }}"
    loop: "{{ data }}"

  - name: Show debug data
    ansible.builtin.debug: var=data_elements

  - name: Write output json file
    copy:
      dest: output.json
      content: "{{ {'records': data_elements} | to_json }}" 
</code></pre>



<h3>Task By Task Breakdown</h3>



<p>Since most of the code here is the same, I will only focus on breaking out the differences.</p>



<pre class="wp-block-code yaml"><code> - name: Create a new array
    set_fact: 
      data_elements: &#091;]</code></pre>



<p>The block above sets up the empty data_elements array that we will utilize to map our file lines onto.</p>



<pre class="wp-block-code yaml"><code>  - name: Loop through lines and add data elements to array
    set_fact:
      data_elements: "{{ data_elements + &#091;{'name': item}] }}"
    loop: "{{ data }}"</code></pre>



<p>This is setting up a loop to loop over our initial data variable which was read from input.txt.  It is appending new dictionaries into a larger array with a key of &#8216;name&#8217; and a value of the item in a loop.</p>



<pre class="wp-block-code yaml"><code>  - name: Write output json file
    copy:
      dest: output.json
      content: "{{ {'records': data_elements} | to_json }}" </code></pre>



<p>Finally, we are doing the same write operation as the simple example, but this time we are creating a dictionary with a key of &#8216;records&#8217; and a value of the data_elements array.</p>



<p>This will have an output that looks like this:</p>



<pre class="wp-block-code json"><code>{
   "records":&#091;
      {
         "name":"/site/foo/"
      },
      {
         "name":"/site/bar/"
      }
   ]
}</code></pre>



<h2>Conclusion</h2>



<p>As I stated at the beginning of the article, data manipulation in DevOps is a key skill to learn.  Hopefully, this helps kickstart someone on their journey into becoming a DevOps engineer!.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
