<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>Kubernetes &#8211; A DevOps Blog</title>
	<atom:link href="https://www.valewood.org/devops/kubernetes/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.valewood.org/</link>
	<description>Occasionally a developer makes an Ops!</description>
	<lastBuildDate>Fri, 23 Dec 2022 17:22:54 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>

<image>
	<url>https://www.valewood.org/wp-content/uploads/2022/08/A-DevOoops-1-e1660773390219.png</url>
	<title>Kubernetes &#8211; A DevOps Blog</title>
	<link>https://www.valewood.org/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>A Beginner&#8217;s Guide to Unlocking the Power of ImagePullPolicy</title>
		<link>https://www.valewood.org/kubernetes-imagepullpolicy/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Fri, 23 Dec 2022 17:22:53 +0000</pubDate>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=2300</guid>

					<description><![CDATA[Are you looking to unlock the full potential of ImagePullPolicy? If yes, then you’ve come to the right place! In this guide, we will discuss everything you need to know about ImagePullPolicy – from understanding what it is, to the&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Are you looking to unlock the full potential of ImagePullPolicy? If yes, then you’ve come to the right place! In this guide, we will discuss everything you need to know about ImagePullPolicy – from understanding what it is, to the benefits of using it, getting started, setting it up, and more.</p>



<p>By the end of this guide, you will have all the knowledge you need to make the most of ImagePullPolicy. Let’s get started!</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What Is The ImagePullPolicy?</h2>



<p>ImagePullPolicy is a set of rules used to control how images are pulled from container registries. It allows users to specify which images can be pulled when they can be pulled, and where they can be pulled from. This allows users to have greater control over their images and how they are used.</p>



<p>ImagePullPolicy is also a great way to ensure that images are kept up to date. By setting rules that limit when images can be pulled, users can ensure that their images are always up-to-date and that they are not using outdated versions of their images. This can help to reduce the risk of security vulnerabilities and ensure that their applications are running the latest versions of their images.</p>



<p>The ImagePullPolicy field in a <a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a> Pod spec does not directly enhance security, but it can be used as part of a security strategy by controlling when and how container images are pulled.</p>



<p>For example, you can set the ImagePullPolicy to IfNotPresent to ensure that the container image is only pulled from the registry if it is not already present on the node. This can help prevent unauthorized images from being deployed to your cluster.</p>



<p>You can also use the ImagePullPolicy to control when container images are updated. For example, you can set the policy to Always to ensure that the latest version of the image is always used, or you can set it to Never to prevent the image from being updated. This can be useful for ensuring that your deployments are consistent and that you are using known, stable versions of container images.</p>



<p>Overall, while the ImagePullPolicy is not directly related to security, it can be used as part of a security strategy by controlling when and how container images are pulled and updated.</p>



<h2>Benefits of Using ImagePullPolicy</h2>



<p>There are many benefits to using ImagePullPolicy, including improved security, increased control, and better efficiency. Let’s look at each of these in more detail:</p>



<h3>Improved Security</h3>



<p>By setting rules that limit which images can be pulled, when they can be pulled, and where they can be pulled from, users can be confident that their images are pulled from a secure location. This can help to reduce the risk of security vulnerabilities and ensure that their applications are running the latest versions of their images.</p>



<h3>Increased Control</h3>



<p>ImagePullPolicy also allows users to have greater control over their images and how they are used. By setting rules that limit when images can be pulled, users can ensure that their images are always up-to-date and that they are not using outdated versions of their images. This can help to ensure that their applications are running the most recent versions of their images and that any security vulnerabilities are addressed as quickly as possible.</p>



<h3>Better Efficiency</h3>



<p>Finally, ImagePullPolicy can also help to improve the efficiency of the image pull process. By setting rules that limit when images can be pulled, users can ensure that their images are pulled only when necessary. This can help to reduce the time and resources spent on pulling images and ensure that their applications are running the most up-to-date versions of their images.</p>



<h2>ImagePullPolicy Configuration Facets</h2>



<p>An image pull policy in Kubernetes specifies how a container should handle image updates. The relevant information configured in an image pull policy includes the following:</p>



<ol>
<li><strong>The image repository:</strong> This is the location from which the container should pull the image. The repository can be a public registry like <a href="https://www.docker.com/" data-internallinksmanager029f6b8e52c="16" title="Docker" rel="nofollow noopener" target="_blank">Docker</a> Hub or a private registry. If the image is hosted on Docker Hub then this can be specified by image name shorthand instead of the fully qualified repository URL.</li>



<li><strong>The image tag:</strong> The image tag specifies the version of the image that should be used. If no tag is specified, the default latest tag is used.</li>



<li><strong>The policy: </strong>The policy specifies whether the container should always attempt to pull the latest version of the image (Always) or only pull the image if it is not already present on the host machine (IfNotPresent).</li>
</ol>



<p>These details are typically specified in the container configuration file, which is used to create the container in a Kubernetes deployment. The image pull policy is just one aspect of the container configuration, and other details such as the container name, resources, and environment variables may also be specified.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Getting started with ImagePullPolicy</h2>



<p>Now that we’ve discussed the benefits of using ImagePullPolicy, let’s look at how to get started. The first step is to set up an ImagePullPolicy. This is a simple process that involves creating a set of rules that define how images are pulled from your registries. Once your rules are set up, you can start to apply them to your images.</p>



<p>To set up ImagePullPolicy, you will need to create a set of rules that define which images can be pulled, when they can be pulled, and where they can be pulled from. This can be done using the ImagePullPolicy configuration file. This file is written in the YAML format and contains all the necessary information about your images and how they should be pulled.</p>



<p>Once your ImagePullPolicy configuration file is complete, you will need to apply it to your images. This can be done by adding a “pull policy” label to your images. This label will include the rules that you set in your ImagePullPolicy configuration file. Once your images are labeled, they will be subject to the rules you set in the configuration file and will only be pulled when the rules are met.</p>



<h3>Examples ImagePullPolicy Configurations</h3>



<p>Here is an example of a Kubernetes Pod specification that includes an ImagePullPolicy:</p>



<pre class="wp-block-code language-yaml"><code>apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx:1.19
    imagePullPolicy: IfNotPresent
  ...</code></pre>



<p>In this example, the ImagePullPolicy field is set to IfNotPresent, which means that the container image will only be pulled from the specified registry if it is not already present on the node.</p>



<p>You can also set the ImagePullPolicy field to Always or Never, depending on your specific requirements. For example:</p>



<pre class="wp-block-code language-yaml"><code>apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx:1.19
    imagePullPolicy: Always
  ...</code></pre>



<p>This would cause the container image to be pulled from the registry every time the Pod is started, ensuring that the latest version of the image is always used.</p>



<pre class="wp-block-code language-yaml"><code>apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx:1.19
    imagePullPolicy: Never
  ...</code></pre>



<p>This would prevent the container image from being pulled from the registry, and the existing image on the node would be used even if it is out of date.</p>



<h2>Setting up ImagePullPolicy</h2>



<p>Now that you know how to get started with ImagePullPolicy, let’s look at how to set it up correctly. Setting up ImagePullPolicy can be a bit tricky, so it’s important to follow the steps carefully.</p>



<p>The first step is to create an ImagePullPolicy configuration file. This file is written in the YAML format and contains all the necessary information about your images and how they should be pulled. This includes the specified image that can be pulled, when they can be pulled, and where they can be pulled from.</p>



<p>Once your ImagePullPolicy configuration file is complete, the next step is to apply it to your images. This can be done by adding a “pull policy” label to your images. This label will include the rules that you set in your ImagePullPolicy configuration file. Once your images are labeled, they will be subject to the rules you set in the configuration file and will only be pulled when the rules are met.</p>



<p>Finally, you will need to set up the ImagePullPolicy workflow. This workflow will define the steps that need to be taken when an image is pulled. This includes verifying that the image is authorized, ensuring that it is up-to-date, and pulling it from the correct registry.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Understanding the ImagePullPolicy workflow</h2>



<p>Now that you know how to set up ImagePullPolicy, let’s look at how the workflow works. The ImagePullPolicy workflow is made up of several steps that must be completed in order for an image to be pulled. These steps include verifying that the image is authorized, ensuring that it is up-to-date, and pulling it from the correct registry.</p>



<p>The image pull policy for a container in a Kubernetes deployment specifies how the container should handle image updates. There are two options for the image pull policy:</p>



<ol>
<li><strong>Always:</strong> This policy means that the container will always attempt to pull the latest version of the image from the specified container image registry.</li>



<li><strong>IfNotPresent:</strong> This policy means that the container will only pull the image from the repository if it is not already present on the host machine. If the image is present on the host, the container will use the local version of the image.</li>
</ol>



<p>The logical flow for the image pull policy would depend on the specific deployment and configuration, but generally, the container would check the specified image repository for updates based on the specified policy, and then either pull the updated image or use the local version as appropriate.</p>



<h2>Troubleshooting ImagePullPolicy</h2>



<p>There are a few steps you can take to troubleshoot issues with the image pull policy for a container in a Kubernetes deployment:</p>



<ol>
<li>Check the status of the container to see if it is running or has failed. You can use the kubectl describe command to get more information about the status of the container.</li>



<li>Check the container logs for any error messages or other clues about what might be causing the issue. You can use the kubectl logs command to view the container logs.</li>



<li>Check the image repository to ensure that the image is available and can be pulled. You can use the docker pull command to manually pull the image and see if there are any issues.</li>



<li>Check the container configuration to ensure that the ImagePullPolicy is set correctly and that the image repository and tag are correct.</li>



<li>If the issue persists, you may want to try redeploying the container or rolling back to a previous version of the image to see if that resolves the issue.</li>
</ol>



<p>It may also be helpful to consult the documentation or seek guidance from the maintainers of the image or the deployment if you are unable to resolve the issue on your own.</p>



<h2>Best Practices for using ImagePullPolicy</h2>



<p>Here are some best practices for using the image pull policy in Kubernetes deployments:</p>



<ol>
<li><strong>Use the IfNotPresent policy whenever possible:</strong> This policy allows you to use a local copy of the image if it exists locally, which can be faster and more reliable than pulling the image from a remote repository every time.</li>



<li><strong>Use version tags for your images:</strong> By using version tags, you can easily roll back to a previous version of an image if needed.</li>



<li><strong>Regularly check for updates to your images:</strong> It&#8217;s a good idea to regularly check for updates to your images and deploy the latest versions to ensure that you are using the most up-to-date and secure versions of your software.</li>



<li><strong>Use a private image repository:</strong> If you are using proprietary or sensitive images, it is recommended to use a private image repository to ensure that the images are secure and only accessible to authorized users.</li>



<li><strong>Use a container registry that is close to your deployment:</strong> To minimize the time it takes to pull images, it is recommended to use a container registry that is physically close to your deployment. This can be especially important for large images or deployments with many containers.</li>
</ol>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>In conclusion, ImagePullPolicy is a powerful tool that can help to improve security, increase control, and improve efficiency. By setting up ImagePullPolicy correctly, following the best practices for using it, and troubleshooting any issues, you can ensure that your images are secure and that they are pulled correctly and efficiently.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Solving the &#8216;This Combination of Host and Port Requires TLS&#8217; Error in Kubernetes</title>
		<link>https://www.valewood.org/kubernetes-port-requires-tls/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Fri, 23 Dec 2022 17:15:28 +0000</pubDate>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=2292</guid>

					<description><![CDATA[Kubernetes is a powerful container orchestration platform that enables users to deploy, manage, and scale applications quickly and easily. It has gained a lot of favor in the DevOps community for its ability to be highly automated. Unfortunately, like any&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a> is a powerful container orchestration platform that enables users to deploy, manage, and scale applications quickly and easily.  It has gained a lot of favor in the <a href="https://www.valewood.org/topics/devops/" data-internallinksmanager029f6b8e52c="15" title="How To Leverage the DevOps Methodology for Success!​" target="_blank" rel="noopener">DevOps</a> community for its ability to be highly automated.  Unfortunately, like any other software, it can sometimes present cryptic errors which are hard to debug.</p>



<p>One such error is the “This combination of host and port requires TLS” error.</p>



<p>In this blog, we’ll explore what this error is, what causes it, and how to troubleshoot and fix it. We’ll also discuss some tips for avoiding this error and common mistakes to avoid when dealing with it. Lastly, we’ll look at some Kubernetes best practices for avoiding this error.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What is the &#8216;This Combination of Host and Port Requires TLS&#8217; error?</h2>



<p>The “This combination of host and port requires TLS” error is an error in Kubernetes that occurs when a user attempts to connect to a cluster without using a secure protocol such as Transport Layer Security (TLS). It is a common error that is seen in Kubernetes clusters and is usually caused by misconfigured network settings or incorrect authentication credentials.</p>



<p>The error looks something like this:</p>



<blockquote class="wp-block-quote">
<p>Error: This combination of host and port requires TLS</p>
</blockquote>



<p>The “This combination of host and port requires TLS” error is a type of TLS handshake error. TLS is a cryptographic protocol that is used to secure communications between two entities. It is a vital part of any secure network, and thus it is important to ensure that TLS is enabled and configured properly in order to avoid this error.</p>



<h2>What causes the &#8216;This Combination of Host and Port Requires TLS&#8217; error?</h2>



<p>The “This combination of host and port requires TLS” error is usually caused by one of three things: an incorrect network configuration, an incorrect authentication configuration, connecting to a secure service via HTTP instead of HTTPS, or a missing or incorrect TLS certificate.</p>



<p><strong>Incorrect network configurations</strong> can cause this error if the user is attempting to connect to the wrong host or port. This can happen if the user has mistakenly entered the wrong IP address or hostname, or if the user has entered the wrong port number. It is also possible that the user has misconfigured the network settings, such as a firewall or a proxy, which can prevent the user from connecting to the cluster.</p>



<p><strong>Incorrect authentication configurations</strong> can also cause this error. If the user’s credentials are incorrect, then the user will not be able to connect to the cluster. This can happen if the user has entered the wrong username or password, or if the user has not set up authentication correctly.</p>



<p><strong>Connecting to a secure service via HTTP instead of HTTPS</strong> can also cause this error to be displayed. Since Kubernetes services are a mapping between a load-balanced IP address and a running pod and Kubernetes can do this mapping on almost any port, your cluster is attempting to provide a helpful message telling you that the port you have configured only negotiates encrypted traffic transports.</p>



<p>Finally, a <strong>missing or incorrect TLS certificate</strong> can also cause this error. TLS certificates are used to authenticate a user and allow them to connect to the cluster. Certificates are also used to perform end-to-end encryption between a user and a Kubernetes service. If the TLS certificate is missing or incorrect, then the user will not be able to connect to the cluster.</p>



<h2>How to troubleshoot the &#8216;This Combination of Host and Port Requires TLS&#8217; error</h2>



<p>The first step in troubleshooting the “This combination of host and port requires TLS” error is to check the network configuration. Make sure that the user has entered the correct IP address or hostname, as well as the correct port number. Additionally, check to make sure that all of the network settings, such as firewalls and proxies, are configured properly.</p>



<p>The next step is to check the use of HTTPS versus HTTP in the URL being requested from the Kubernetes cluster. If your service is set up to utilize a certificate, but the request you are making is HTTP, then this error message will be returned.</p>



<p>Finally, check the TLS certificate. Make sure that the TLS certificate is present and that it is valid. If the TLS certificate is missing or incorrect, then the user will not be able to connect to the cluster.</p>



<p>Below are a few different reference examples of how you can configure Kubernetes to utilize SSL certificates on your cluster. The exact configuration will depend on your specific requirements and the characteristics of your environment.</p>



<h4>Reference Service Definition</h4>



<p>Here is an example Kubernetes service configuration that utilizes TLS certificates:</p>



<pre class="wp-block-code language-yaml"><code>apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
    - name: https
      port: 443
      targetPort: 8443
      protocol: TCP
  loadBalancerSourceRanges:
    - 0.0.0.0/0
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
  tls:
    - secretName: my-tls-certs
      termination: edge
</code></pre>



<p>This configuration defines a Kubernetes service called &#8220;my-service&#8221; that exposes port 443 to external traffic and directs it to port 8443 on the pods in the &#8220;my-app&#8221; deployment. It also specifies a TLS secret called &#8220;my-tls-certs&#8221; that contains the necessary certificates and keys for establishing a secure connection. The termination field is set to edge, which means that the service will terminate TLS at the edge of the cluster.</p>



<h4>Reference Ingress NGINX Definition</h4>



<p>Here is an example Kubernetes Ingress configuration that utilizes TLS certificates with NGINX:</p>



<pre class="wp-block-code language-yaml"><code>apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: my-tls-certs
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: my-service
          servicePort: 443
</code></pre>



<p>This configuration defines an Ingress resource called &#8220;my-ingress&#8221; that routes incoming traffic to the &#8220;my-service&#8221; service on port 443. It also specifies a TLS secret called &#8220;my-tls-certs&#8221; that contains the necessary certificates and keys for establishing a secure connection. The <a target="_blank" rel="noreferrer noopener" href="http://nginx.ingress.kubernetes.io/ssl-redirect">nginx.ingress.kubernetes.io/ssl-redirect</a> annotation tells NGINX to redirect all HTTP traffic to HTTPS.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>How to fix the &#8216;This Combination of Host and Port Requires TLS&#8217; error</h2>



<p>To fix the &#8220;This Combination of Host and Port Requires TLS&#8221; error in Kubernetes, you will need to ensure that TLS is correctly configured for the host and port combination you are trying to access. Here are the steps you can take to do this:</p>



<ol>
<li><strong>Confirm that TLS is required:</strong> Make sure that the service you are trying to access requires TLS. If it does not, then the error may be caused by a misconfiguration or a typo in your configuration.</li>



<li><strong>Check your TLS configuration:</strong> Review your TLS configuration to ensure that it is correct and complete. This includes verifying that you have the necessary certificates and keys and that you have specified the correct host and port in your configuration.</li>



<li><strong>Use the correct host and port combination: </strong>Make sure that you are using the correct host and port combination in your configuration. If you are not sure what the correct combination is, you can consult the documentation for the service you are trying to access.</li>



<li><strong>Use the correct protocol:</strong> Make sure that you are using the correct protocol (e.g. HTTPS) when accessing the service.</li>



<li><strong>Check for typos: </strong>Check your configuration for typos or other mistakes that may be causing the error.</li>



<li><strong>Restart affected services:</strong> If you have recently made changes to your TLS configuration, try restarting the affected services to see if that resolves the error.</li>



<li><strong>Consult the documentation:</strong> If you are still having trouble, consult the documentation for the service you are trying to access, as well as the documentation for Kubernetes and TLS, to see if there are any additional troubleshooting tips or requirements you need to be aware of.</li>
</ol>



<p>By following these steps, you should be able to resolve the &#8220;This Combination of Host and Port Requires TLS&#8221; error and successfully access the service.</p>



<h2>Tips for avoiding the &#8216;This Combination of Host and Port Requires TLS&#8217; error message</h2>



<ol>
<li><strong>Configure TLS correctly: </strong>Make sure that you have correctly configured TLS for your host and port combination. This includes setting up the necessary certificates and keys and specifying the correct host and port in your TLS configuration.</li>



<li><strong>Use the correct host and port combination:</strong> Double-check that you are using the correct host and port combination in your configuration. If you are not sure what the correct combination is, you can consult the documentation for the service you are trying to access.</li>



<li><strong>Use the correct protocol:</strong> Make sure that you are using the correct protocol (e.g. HTTPS) when accessing the service.</li>



<li><strong>Check for typos: </strong>Check your configuration for typos or other mistakes that may be causing the error.</li>



<li><strong>Use a linting tool:</strong> There are several linting tools specifically designed for linting Kubernetes configurations, such as kube-linter, kubeval, and conftest. These tools can check your configurations for common mistakes, syntax errors, and best practices violations.</li>



<li><strong>Use the Kubernetes API server:</strong> You can use the Kubernetes API server to validate your configurations by sending them to the server and checking for errors. To do this, you can use the <code>kubectl create</code> or <code>kubectl apply</code> commands with the <code>--dry-run</code> flag, which will send your configurations to the API server for validation without actually creating any resources.</li>



<li><strong>Use a configuration management tool:</strong> Configuration management tools like Helm, <a href="https://www.ansible.com/" data-internallinksmanager029f6b8e52c="7" title="Ansible">Ansible</a>, and Terraform have built-in linting functionality that can check your Kubernetes configurations for errors and best practices violations.</li>



<li><strong>Consult the documentation:</strong> If you are still having trouble, consult the documentation for the service you are trying to access, as well as the documentation for Kubernetes and TLS, to see if there are any additional troubleshooting tips or requirements you need to be aware of.</li>
</ol>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>In conclusion, the “This combination of host and port requires TLS” error is an error in Kubernetes that occurs when a user attempts to connect to a cluster without using a secure protocol such as TLS. This error can be caused by an incorrect network configuration, an incorrect authentication configuration, or a missing or incorrect TLS certificate. In order to troubleshoot and fix this error, the user should check the network configuration, the authentication configuration, and the TLS certificate. Additionally, there are several tips for avoiding this error as well as some common mistakes to avoid when dealing with it. Lastly, Kubernetes provides several best practices for avoiding this error.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Solve Your Kubernetes Pod Stuck in Terminating Status Woes in no Time</title>
		<link>https://www.valewood.org/kubernetes-pod-stuck-terminating/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Thu, 08 Dec 2022 02:17:17 +0000</pubDate>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[day2ops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=2031</guid>

					<description><![CDATA[Kubernetes is a powerful tool for managing complex containerized applications. It helps developers quickly deploy, scale, and manage their applications. However, with great power comes great responsibility and Kubernetes has its share of issues that can cause headaches for developers.&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a> is a powerful tool for managing complex containerized applications. It helps developers quickly deploy, scale, and manage their applications.</p>



<p>However, with great power comes great responsibility and Kubernetes has its share of issues that can cause headaches for developers. One of the most dreaded issues is the Kubernetes &#8220;pod stuck terminating&#8221; issue.</p>



<p>In this article, we’ll discuss what this issue is, the common causes, how to diagnose a stuck pod, strategies for solving the issue, a step-by-step guide to solving the issue, best practices for avoiding the issue in the future, troubleshooting tips for Kubernetes pods, useful tools for monitoring and managing Kubernetes pods, courses and tutorials on Kubernetes pod management, and more.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>What is the Kubernetes &#8220;Pod Stuck Terminating&#8221; Issue?</h2>



<p>The Kubernetes pod stuck terminating issue occurs when a pod remains in the “Terminating” state for an extended period of time. This can be caused by a number of different issues and can be quite frustrating for developers.</p>



<p>The issue can manifest itself in a number of ways. For example, you may see that your pod is stuck in the “Terminating” state and never fully terminates and continues to consume resources. You may check the host to which the pod was assigned, and the <a href="https://www.docker.com/" data-internallinksmanager029f6b8e52c="16" title="Docker" rel="nofollow noopener" target="_blank">Docker</a> container and underlying PID have been terminated, but Kubernetes is reporting it as stuck in a terminating state.</p>



<p>Regardless of the issue, the Kubernetes pod stuck terminating issue can be a major headache for developers and can cause serious delays in deploying applications.</p>



<h2>Common Causes of Pods Becoming Stuck</h2>



<p>The Kubernetes pod stuck terminating issue can be caused by a number of different issues. The most common causes include:</p>



<ul>
<li><strong>Not enough resources:</strong> Kubernetes pods require sufficient resources in order to function properly. If there aren’t enough resources available, the pod may get stuck in the “Terminating” state. It is important to look at the state of your worker node at the time the pod went unresponsive. If all system resources were consumed, like a disk filling up, then Kubernetes may not actually be the core issue to diagnose.</li>



<li><strong>Contention for resources:</strong> If there are multiple pods competing for resources, one of the pods may get stuck in the “Terminating” state as it waits for resources to become available.</li>



<li><strong>Problems with the pod: </strong>If there is something wrong with the pod itself, it may get stuck in the “Terminating” state. This could be due to an issue with the code, configuration, or other problems.</li>



<li><strong>Issues with the Kubernetes cluster:</strong> If there is something wrong with the Kubernetes cluster itself, it may cause the pod to get stuck in the “Terminating” state. This can happen when cluster communications become disconnected from a blip or network partition. The worker node may be functioning as expected, but cannot tell the Kubernetes API that it is working properly.</li>
</ul>



<h2>How to Diagnose a Stuck Pod</h2>



<p>If you find that your Kubernetes pod is stuck in the “Terminating” state, there are a few steps you can take to diagnose the issue.</p>



<p>The first thing you should do is check the logs. Check the logs for the pod to see if there are any error messages or warnings that could indicate the cause of the issue.</p>



<p>Next, you should check the resource utilization of the pod. If the pod is consuming too many resources, it could be causing issues.</p>



<p>After that, you should check the resource utilization on the server at the time the pod became stuck in a terminating state. If the server ran out of disk, the pod became stuck, but now system resources look fine; the reality is that the processes on the server itself may be in an unknown or unrecoverable state without a reboot.</p>



<p>Finally, you should check the status of the node from kubectl. If the node is not reporting itself as healthy via `kubectl get nodes` then that node should be drained, which may not be possible, and subsequently rebooted and its health re-reviewed.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Strategies for Solving the Issue</h2>



<p>Once you’ve identified the cause of the issue, there are a few strategies you can use to solve the issue.</p>



<h3>Check the Worker Node</h3>



<p>First, check the worker node that was running the pod to see what state the underlying container is in via <code>ctr</code>. If the container is no longer running, the next thing to check is for running PIDs on the system that matches the process being run by the container. If there are no relevant PIDs, then you can run <code>kubectl delete pod --force=true --grace-period=0 -n &lt;NAMESPACE&gt; &lt;STUCK POD NAME&gt;</code> to forcibly remove the pod from the Kubernetes API.</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2139.png" alt="ℹ" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Depending on your version of Kubernetes, you may have Docker or Container.io as a container runtime.  If you have docker, use <code>docker ps</code> to check container status.  If you have Container.io you will use <code>runc</code> or <code>ctr</code> to check the status of your pods.</p>
</blockquote>



<p>In this scenario, a pod was successfully terminated on the worker system, but the Kubernetes worker or the API is out of sync with each other and neither of them really knows the state of the pod.</p>



<p>Signs may point to the issue being fixed after this, but in my experience, you should go ahead and do a full health check of your cluster as this is an edge case caused by some underlying issue somewhere else.</p>



<h3>Keep Checking the Worker Node</h3>



<p>I am cheating here slightly. This is an extension of &#8220;Check the Worker Node&#8221;, but we will assume that the pod is actually still running and has not terminated.</p>



<p>When a pod is stuck in a terminating state this way, the PID that the pod was managing may not be terminating properly. Checking logs here should be the first step. I have run into issues in the past where applications are not properly listening to system signals like SIGHUP to know it is time to terminate.</p>



<p>If you are running internally developed software, check with your development teams to see how the application responds to system signals.</p>



<h3>Rolling Reboots</h3>



<p>The worker node may be perfectly healthy in some instances. Working backward, there could be a problem with either the Kubernetes API receiving update information from worker nodes, a network partition / other network issues, or the ETCd cluster may not be synchronizing properly across all nodes and refusing new write operations.</p>



<p>If you are in a highly resilient state in your Kubernetes cluster, load-balanced masters with multiple ETCd nodes, then a rolling reboot should not hurt anything. Your rolling reboot at that layer should be properly communicated to any parties that could be impacted.</p>



<p>In my experience, this may fix a multitude of issues that may not even be presenting themselves. This is why communication is important. There may be resources that are suddenly rebooted or changed in a way that your business partners were not expecting.</p>



<h2>A Step-By-Step Guide to Solving the Issue</h2>



<p>If you find that your Kubernetes pod is stuck in the “Terminating” state, here’s a step-by-step guide to solving the issue:</p>



<ol>
<li>Check the worker node for signs of stuck PIDs or stuck containers through `ctr`</li>
</ol>



<p>If the node has stuck PIDs or a stuck container, the process running inside of the container is not properly listening to system signals like SIGHUP. File a bug report with the application developers for guidance or bug fixes.</p>



<ol>
<li>Check the worker kubelet process logs for signs errors</li>



<li>Check the master&#8217;s kubelet process logs for signs of errors</li>



<li>Check the master&#8217;s kube-scheduler process logs for signs of errors</li>



<li>Check the master&#8217;s kube-controller-manager process logs for signs of errors</li>



<li>Check the master&#8217;s kube-apiserver process logs for signs of errors</li>
</ol>



<p>If any of these checks present an issue, it is time to start rolling reboots of nodes in your cluster. Start with the impacted worker and move your way back to the masters. Other workers in the cluster probably do not need a reboot.</p>



<ol>
<li>Check server resources at the time the pod became stuck in a terminating state.</li>
</ol>



<p>If this is the case, look for both a root cause of why the server filled up, and perform a reboot on the server. Servers become very unhappy when resources like disks become inaccessible due to capacity issues.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Best Practices for Avoiding the Issue in the Future</h2>



<p>Once you’ve solved the Kubernetes pod stuck terminating issue, it’s important to take steps to avoid the issue in the future. Here are some best practices for avoiding the issue:</p>



<ul>
<li>Monitor your pods: Monitor your pods to make sure they’re not consuming too many resources.</li>



<li>Set limits on resources: Set limits on the resources that your pods can consume to avoid resource contention.</li>



<li>Check your code: Make sure your code is correct and that your pods are properly configured.</li>



<li>Test your pods: Test your pods before deploying them to make sure they’re functioning properly.</li>



<li>Upgrade your cluster: Make sure your Kubernetes cluster is up-to-date to avoid issues.</li>
</ul>



<h2>Troubleshooting Tips for Kubernetes Pods</h2>



<p>If you’re having issues with your Kubernetes pods, here are some troubleshooting tips to help you identify and solve the issue:</p>



<ul>
<li><strong>Check the logs:</strong> Check the logs for your pod to see if there are any error messages or warnings.</li>



<li><strong>Check the resource utilization:</strong> Check the resource utilization of your pod to make sure it’s not consuming too many resources.</li>



<li><strong>Check the status of the pod:</strong> Check the status of the pod to make sure it’s not stuck in the “Terminating” state.</li>



<li><strong>Try scaling up the resources: </strong>Try scaling up the resources for the pod to see if that helps to resolve the issue.</li>



<li><strong>Try restarting the pod:</strong> Try restarting the pod to see if that helps to resolve the issue.</li>



<li><strong>Try deleting the pod:</strong> Try deleting the pod and recreating it to see if that helps to resolve the issue.</li>
</ul>



<h2>Useful Tools for Monitoring and Managing Kubernetes Pods</h2>



<p>There are a number of useful tools that can help you monitor and manage your Kubernetes pods. These tools can help you identify and solve issues with your pods.</p>



<p>Some of the most popular tools include:</p>



<ul>
<li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" data-type="URL" data-id="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" rel="noreferrer noopener nofollow">Kubernetes Dashboard</a>: This open-source dashboard allows you to monitor and manage your Kubernetes pods.</li>



<li><a href="https://prometheus.io/" data-internallinksmanager029f6b8e52c="2" title="Prometheus" rel="nofollow noopener" target="_blank">Prometheus</a>: This open-source monitoring tool allows you to monitor your Kubernetes clusters and pods.</li>



<li><a href="https://aquasecurity.github.io/kube-hunter/" target="_blank" data-type="URL" data-id="https://aquasecurity.github.io/kube-hunter/" rel="noreferrer noopener nofollow">Kube-Hunter</a>: This open-source security tool allows you to scan your Kubernetes clusters for security issues.</li>



<li><a href="https://helm.sh/" target="_blank" data-type="URL" data-id="https://helm.sh/" rel="noreferrer noopener nofollow">Helm</a>: This open-source package manager allows you to easily install and manage applications on your Kubernetes cluster.</li>
</ul>



<h2>Courses and Tutorials on Kubernetes Pod Management</h2>



<p>If you’re looking to learn more about managing Kubernetes pods, there are a number of courses and tutorials available. Here are some of the best courses and tutorials:</p>



<ul>
<li><a href="https://www.udemy.com/course/the-complete-guide-to-kubernetes-3-course-bundle/" target="_blank" data-type="URL" data-id="https://www.udemy.com/course/the-complete-guide-to-kubernetes-3-course-bundle/" rel="noreferrer noopener nofollow">Kubernetes The Complete Guide</a>: This course covers everything you need to know about managing Kubernetes pods.</li>



<li><a href="https://training.linuxfoundation.org/training/kubernetes-fundamentals/" target="_blank" data-type="URL" data-id="https://training.linuxfoundation.org/training/kubernetes-fundamentals/" rel="noreferrer noopener nofollow">Kubernetes Fundamentals</a>: This tutorial covers the basics of managing Kubernetes pods.</li>



<li><a href="https://kubernetesbootcamp.github.io/kubernetes-bootcamp/" target="_blank" data-type="URL" data-id="https://kubernetesbootcamp.github.io/kubernetes-bootcamp/" rel="noreferrer noopener nofollow">Kubernetes Bootcamp</a>: This course covers the fundamentals of managing Kubernetes clusters and pods.</li>



<li><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/" target="_blank" data-type="URL" data-id="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/" rel="noreferrer noopener nofollow">Kubernetes Pod Management</a>: This tutorial covers the basics of managing Kubernetes pods.</li>
</ul>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Conclusion</h2>



<p>The dreaded Kubernetes &#8220;pod stuck terminating&#8221; issue can be a major headache for developers and systems administration teams.</p>



<p>In this article, we’ve discussed what this issue is, the common causes, how to diagnose a stuck pod, strategies for solving the issue, a step-by-step guide to solving the issue, best practices for avoiding the issue in the future, troubleshooting tips for Kubernetes pods, useful tools for monitoring and managing Kubernetes pods, courses and tutorials on Kubernetes pod management, and more.</p>



<p>If you’re having issues with your Kubernetes pods, try following the steps outlined in this article. And remember, if you’re looking to learn more about managing Kubernetes pods, there are a number of courses and tutorials available to help you.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Helm: Kubernetes Cluster Unreachable </title>
		<link>https://www.valewood.org/helm-kubernetes-cluster-unreachable/</link>
		
		<dc:creator><![CDATA[Geoff Wagner]]></dc:creator>
		<pubDate>Sat, 03 Dec 2022 02:51:59 +0000</pubDate>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[DevOps]]></category>
		<category><![CDATA[devops]]></category>
		<category><![CDATA[howto]]></category>
		<category><![CDATA[kubernetes]]></category>
		<category><![CDATA[tools]]></category>
		<guid isPermaLink="false">/?p=1924</guid>

					<description><![CDATA[Kubernetes, while fairly mature as a platform, is still considered an emerging technology in the business space. Due to this, lots of engineers are spending their free time trying to learn about Helm which can lead to some pretty frustrating&#8230;]]></description>
										<content:encoded><![CDATA[
<p><a href="https://kubernetes.io/" data-internallinksmanager029f6b8e52c="4" title="Kubernetes" rel="nofollow noopener" target="_blank">Kubernetes</a>, while fairly mature as a platform, is still considered an emerging technology in the business space.  Due to this, lots of engineers are spending their free time trying to learn about Helm which can lead to some pretty frustrating errors.  </p>



<p>Let&#8217;s discuss why you might be receiving <code>Error: Kubernetes cluster unreachable</code> when trying to connect to your cluster for the first time.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Kubernetes Install</h2>



<p>There are a lot of different mechanisms on the market today to get Kubernetes up and running depending on your environment.  How you installed Kubernetes is important for troubleshooting later.  Review the install methods and make sure you align underneath one of them in some fashion.</p>



<h3>Local Environment</h3>



<p>Local Kubernetes is going to use <a href="https://k3s.io/" target="_blank" rel="noopener">k3s</a> or <a href="https://minikube.sigs.k8s.io/docs/start/" target="_blank" rel="noopener">minikube</a> to run and install a local version on a standard workstation.  This is a great way to get familiar with Kubernetes because these products will download and install all the requisite dependencies to bootstrap anyone regardless of their skill level.</p>



<h3>On-Prem Environment</h3>



<p>I am differentiating local and on-prem simply from the viewpoint of servers vs desktops.  In a more server-focused environment, many people will use <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> or <a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">kops</a> to deploy their Kubernetes clusters.  Kubespray will ensure that servers are properly configured through IaC while downloading and installing baseline Kubernetes.  By the time you are done, a fully functional cluster should be available.</p>



<p>Kubespray does come with a lot more knobs and dials since it makes fewer opinionated decisions about what your cluster setup should look like.  In a local environment, ingress is going to be handled in a very specific way.  In an on-prem environment, you may have network appliances that want to handle ingress in a very specific way.  Kubespray should be able to get most of your configurations taken care of for your special circumstances.</p>



<h3>Cloud Environment</h3>



<p>Cloud environments can be configured the same way on-prem environments are through kubespray and kops.  Cloud-based VM instances would be spun up on management networks and tools would be run against them to achieve a functioning cluster.</p>



<p>Most cloud providers will have their own managed Kubernetes to be used as well.  Those are probably a much safer way to get started when just starting to dabble in the Kubernetes space.  </p>



<ul>
<li><a href="https://aws.amazon.com/eks/" target="_blank" rel="noopener">Amazon EKS</a></li>



<li><a href="https://azure.microsoft.com/en-us/products/kubernetes-service/" target="_blank" rel="noopener">Azure AKS</a></li>



<li><a href="https://www.digitalocean.com/products/kubernetes" target="_blank" rel="noopener">DigitalOcean</a></li>



<li><a href="https://www.vultr.com/kubernetes/" target="_blank" rel="noopener">Vultr</a></li>
</ul>



<p>These solutions generally are only a few clicks away from a full-stack deployment.  Once you get a bit more comfortable, it would be a good idea to toss out your test cluster and start to move into Terraform, CloudFormation, or <a href="https://azure.microsoft.com/en-us/get-started/azure-portal" data-internallinksmanager029f6b8e52c="20" title="Azure" rel="nofollow noopener" target="_blank">Azure</a> Resource Manager automation to ensure your clusters are codified for future upgrades.</p>



<h2>Error: Kubernetes cluster unreachable</h2>



<p>There are going to be a few troubleshooting steps you should take to diagnose this issue.  Each of them is going to be a little bit different depending on your deployment setup.</p>



<h3>Check Your Kubeconfig</h3>



<p>The first thing to check is your <code>$HOME/.kube/config</code> file.  This file contains all of the relevant information for connecting to your Kubernetes cluster.  It is also very important you keep this file safe and secret since it holds credentials for that connection as well.</p>



<h4>My Kubeconfig is Missing!</h4>



<p>If your kubeconfig file is missing, review your Kubernetes installation instructions for anything specific about copying a kubeconfig to the proper folder on your local machine.  The instructions may also walk you through how to create one.  Helm will not work without this file being created and in the proper location.</p>



<h4>My Kubeconfig Exists!</h4>



<p>If you open that file to read it, you will find that it is YAML formatted with connection parameters in it.  These parameters should include some certificate information, which are credentials and cluster identification verification, and a hostname for the cluster management API address.</p>



<p>If you have kubectl installed on the same machine as your kubeconfig, a simple test would be to run <code>kubectl get nodes</code> to see if you get a list of servers back from the kubernetes API.  If you get an error, then either you do not have the right level of access, or your kubeconfig is not properly configured.  See above <strong>&#8220;My Kubeconfig is Missing&#8221;</strong>.</p>



<p>If this works as intended, and you see a list of servers the next step is to ensure that your kubeconfig is on the same computer that you would like to run helm from.  If you are running helm from a local workstation, make sure you have a proper kubeconfig on that workstation.  If you are running helm from a different server, ensure a kubeconfig is provided for that server.  Make sure to re-test.</p>



<h4>Check Networking</h4>



<p>Helm communicates with the Kubernetes API over port 6443.  Using NMap to check ports, ensure that the machine you are intending to run helm from has clear line of sight communication with the Kubernetes cluster over port 6443.  This can be achieved on Linux via this command: nmap –p 6443 {{cluster address/master hostname}}.  You can find the cluster address/master hostname inside of a validated kubeconfig.</p>



<p>If you are using Windows and looking for an example of how to do port scans, I would suggest switching to Linux or Mac.</p>



<p>If ports show closed or filtered, network communication will not be established with the cluster and Helm will not be able to run configurations.</p>



<p>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-7120242057450442"
     data-ad-slot="6094810801"></ins>
	<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</p>



<h2>Additional Resources</h2>



<p>The steps outlined above should get you pointed in the right direction when you receive Helm errors when trying to contact your cluster for the first time.</p>



<p>If you did not find the answers you needed via this article, I have added a few additional resources below that may be able to help get you sorted out.  If you have additional information to share on this topic, please <a href="https://www.valewood.org/contact/" data-type="page" data-id="984">contact me</a> and I will update this post to reflect any changes.</p>



<ul>
<li><a href="https://github.com/k3s-io/k3s/issues/1126" target="_blank" rel="noopener">GitHub</a></li>



<li><a href="https://stackoverflow.com/questions/63066604/error-kubernetes-cluster-unreachable-get-http-localhost8080-versiontimeou" target="_blank" rel="noopener">StackOverflow</a></li>



<li><a href="https://pet2cattle.com/2022/07/install-helm-k3s" data-type="URL" data-id="https://pet2cattle.com/2022/07/install-helm-k3s" target="_blank" rel="noopener">Pet2Cattle</a></li>
</ul>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
